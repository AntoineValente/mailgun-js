/*! For license information please see mailgun.js.LICENSE.txt */
!function(e,t){"object"==typeof exports&&"object"==typeof module?module.exports=t():"function"==typeof define&&define.amd?define([],t):"object"==typeof exports?exports.mailgun=t():e.mailgun=t()}(this,(function(){return(()=>{var e={271:(e,t,r)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n=r(185);class o extends n.EventTarget{constructor(){throw super(),new TypeError("AbortSignal cannot be constructed directly")}get aborted(){const e=i.get(this);if("boolean"!=typeof e)throw new TypeError("Expected 'this' to be an 'AbortSignal' object, but got "+(null===this?"null":typeof this));return e}}n.defineEventAttribute(o.prototype,"abort");const i=new WeakMap;Object.defineProperties(o.prototype,{aborted:{enumerable:!0}}),"function"==typeof Symbol&&"symbol"==typeof Symbol.toStringTag&&Object.defineProperty(o.prototype,Symbol.toStringTag,{configurable:!0,value:"AbortSignal"});class s{constructor(){a.set(this,function(){const e=Object.create(o.prototype);return n.EventTarget.call(e),i.set(e,!1),e}())}get signal(){return u(this)}abort(){var e;e=u(this),!1===i.get(e)&&(i.set(e,!0),e.dispatchEvent({type:"abort"}))}}const a=new WeakMap;function u(e){const t=a.get(e);if(null==t)throw new TypeError("Expected 'this' to be an 'AbortController' object, but got "+(null===e?"null":typeof e));return t}Object.defineProperties(s.prototype,{signal:{enumerable:!0},abort:{enumerable:!0}}),"function"==typeof Symbol&&"symbol"==typeof Symbol.toStringTag&&Object.defineProperty(s.prototype,Symbol.toStringTag,{configurable:!0,value:"AbortController"}),t.AbortController=s,t.AbortSignal=o,t.default=s,e.exports=s,e.exports.AbortController=e.exports.default=s,e.exports.AbortSignal=o},990:function(e,t,r){"use strict";var n=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});var o=n(r(765)),i=function(){function e(e){this.formData=e}return e.prototype.client=function(e){return new o.default(e,this.formData)},e}();t.default=i},765:function(e,t,r){"use strict";var n=this&&this.__assign||function(){return(n=Object.assign||function(e){for(var t,r=1,n=arguments.length;r<n;r++)for(var o in t=arguments[r])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e}).apply(this,arguments)},o=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});var i=r(402),s=o(r(955)),a=o(r(20)),u=o(r(944)),l=o(r(154)),c=o(r(526)),f=o(r(632)),d=o(r(616)),p=o(r(893)),h=o(r(335)),y=o(r(726)),b=o(r(580)),_=o(r(853));t.default=function(e,t){var r=n({},e);if(!(r=i(r,{url:"https://api.mailgun.net"})).username)throw new Error('Parameter "username" is required');if(!r.key)throw new Error('Parameter "key" is required');this.request=new s.default(r,t),this.domains=new a.default(this.request),this.webhooks=new f.default(this.request),this.events=new u.default(this.request),this.stats=new l.default(this.request),this.suppressions=new c.default(this.request),this.messages=new d.default(this.request),this.routes=new p.default(this.request),this.ips=new b.default(this.request),this.ip_pools=new _.default(this.request),r.public_key&&(r.key=r.public_key,this.public_request=new s.default(r,t),this.validate=new h.default(this.public_request),this.parse=new y.default(this.public_request))}},20:function(e,t,r){"use strict";var n=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});var o=n(r(820)),i=n(r(78)),s=function(e,t,r){this.name=e.name,this.require_tls=e.require_tls,this.skip_verification=e.skip_verification,this.state=e.state,this.wildcard=e.wildcard,this.spam_action=e.spam_action,this.created_at=e.created_at,this.smtp_password=e.smtp_password,this.smtp_login=e.smtp_login,this.type=e.type,this.receiving_dns_records=t||null,this.sending_dns_records=r||null},a=function(){function e(e){this.request=e}return e.prototype._parseMessage=function(e){return e.body},e.prototype._parseDomainList=function(e){return o.default(e.body.items,(function(e){return new s(e)}))},e.prototype._parseDomain=function(e){return new s(e.body.domain,e.body.receiving_dns_records,e.body.sending_dns_records)},e.prototype._parseTrackingSettings=function(e){return e.body.tracking},e.prototype._parseTrackingUpdate=function(e){return e.body},e.prototype.list=function(e){return this.request.get("/v2/domains",e).then(this._parseDomainList)},e.prototype.get=function(e){return this.request.get("/v2/domains/"+e).then(this._parseDomain)},e.prototype.create=function(e){return this.request.post("/v2/domains",e).then(this._parseDomain)},e.prototype.destroy=function(e){return this.request.delete("/v2/domains/"+e).then(this._parseMessage)},e.prototype.getTracking=function(e){return this.request.get(i.default("/v2/domains",e,"tracking")).then(this._parseTrackingSettings)},e.prototype.updateTracking=function(e,t,r){return this.request.put(i.default("/v2/domains",e,"tracking",t),r).then(this._parseTrackingUpdate)},e.prototype.getIps=function(e){return this.request.get(i.default("/v2/domains",e,"ips")).then((function(e){var t;return null===(t=null==e?void 0:e.body)||void 0===t?void 0:t.items}))},e.prototype.assignIp=function(e,t){return this.request.post(i.default("/v2/domains",e,"ips"),{ip:t})},e.prototype.deleteIp=function(e,t){return this.request.delete(i.default("/v2/domains",e,"ips",t))},e.prototype.linkIpPool=function(e,t){return this.request.post(i.default("/v2/domains",e,"ips"),{pool_id:t})},e.prototype.unlinkIpPoll=function(e,t,r){return this.request.delete(i.default("/v2/domains",e,"ips","ip_pool"),{pool_id:t,ip:r})},e}();t.default=a},549:function(e,t){"use strict";var r,n=this&&this.__extends||(r=function(e,t){return(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r])})(e,t)},function(e,t){function n(){this.constructor=e}r(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)});Object.defineProperty(t,"__esModule",{value:!0});var o=function(e){function t(t){var r=t.status,n=t.statusText,o=t.message,i=t.body,s=void 0===i?{}:i,a=this,u=s.message,l=s.error;return(a=e.call(this)||this).stack=null,a.status=r,a.message=o||l||n,a.details=u,a}return n(t,e),t}(Error);t.default=o},944:(e,t,r)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n=r(820),o=r(587),i=r(78),s=(r(955),function(){function e(e){this.request=e}return e.prototype._parsePageNumber=function(e){return e.split("/").pop()},e.prototype._parsePage=function(e,t){return{id:e,number:this._parsePageNumber(t),url:t}},e.prototype._parsePageLinks=function(e){var t,r=this;return t=n(e.body.paging,(function(e,t){return r._parsePage(t,e)})),o(t,"id")},e.prototype._parseEventList=function(e){return{items:e.body.items,pages:this._parsePageLinks(e)}},e.prototype.get=function(e,t){var r,n=this;return t&&t.page?(r=i("/v2",e,"events",t.page),delete t.page):r=i("/v2",e,"events"),this.request.get(r,t).then((function(e){return n._parseEventList(e)}))},e}());t.default=s},853:(e,t,r)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),r(955);var n=function(){function e(e){this.request=e}return e.prototype.list=function(e){var t=this;return this.request.get("/v1/ip_pools",e).then((function(e){return t.parseIpPoolsResponse(e)}))},e.prototype.create=function(e){return this.request.post("/v1/ip_pools",e).then((function(e){return null==e?void 0:e.body}))},e.prototype.update=function(e,t){return this.request.patch("/v1/ip_pools/"+e,t).then((function(e){return null==e?void 0:e.body}))},e.prototype.delete=function(e,t){return this.request.delete("/v1/ip_pools/"+e,t).then((function(e){return null==e?void 0:e.body}))},e.prototype.parseIpPoolsResponse=function(e){return e.body.ip_pools},e}();t.default=n},580:(e,t,r)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),r(955);var n=function(){function e(e){this.request=e}return e.prototype.list=function(e){var t=this;return this.request.get("/v3/ips",e).then((function(e){return t.parseIpsResponse(e)}))},e.prototype.get=function(e){var t=this;return this.request.get("/v3/ips/"+e).then((function(e){return t.parseIpsResponse(e)}))},e.prototype.parseIpsResponse=function(e){return e.body},e}();t.default=n},616:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(e){this.request=e}return e.prototype._parseResponse=function(e){return e.body?e.body:e},e.prototype.create=function(e,t){return t.message?this.request.postMulti("/v3/"+e+"/messages.mime",t).then(this._parseResponse):this.request.postMulti("/v3/"+e+"/messages",t).then(this._parseResponse)},e}();t.default=r},726:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(e){this.request=e}return e.prototype.get=function(e,t){var r={};return Array.isArray(e)&&(e=e.join(",")),r.addresses=e,t&&(r.syntax_only=!1),this.request.get("/v3/address/parse",r).then((function(e){return e.body}))},e}();t.default=r},955:function(e,t,r){"use strict";var n=this&&this.__assign||function(){return(n=Object.assign||function(e){for(var t,r=1,n=arguments.length;r<n;r++)for(var o in t=arguments[r])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e}).apply(this,arguments)},o=this&&this.__awaiter||function(e,t,r,n){return new(r||(r=Promise))((function(o,i){function s(e){try{u(n.next(e))}catch(e){i(e)}}function a(e){try{u(n.throw(e))}catch(e){i(e)}}function u(e){var t;e.done?o(e.value):(t=e.value,t instanceof r?t:new r((function(e){e(t)}))).then(s,a)}u((n=n.apply(e,t||[])).next())}))},i=this&&this.__generator||function(e,t){var r,n,o,i,s={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return i={next:a(0),throw:a(1),return:a(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function a(i){return function(a){return function(i){if(r)throw new TypeError("Generator is already executing.");for(;s;)try{if(r=1,n&&(o=2&i[0]?n.return:i[0]?n.throw||((o=n.return)&&o.call(n),0):n.next)&&!(o=o.call(n,i[1])).done)return o;switch(n=0,o&&(i=[2&i[0],o.value]),i[0]){case 0:case 1:o=i;break;case 4:return s.label++,{value:i[1],done:!1};case 5:s.label++,n=i[1],i=[0];continue;case 7:i=s.ops.pop(),s.trys.pop();continue;default:if(!((o=(o=s.trys).length>0&&o[o.length-1])||6!==i[0]&&2!==i[0])){s=0;continue}if(3===i[0]&&(!o||i[1]>o[0]&&i[1]<o[3])){s.label=i[1];break}if(6===i[0]&&s.label<o[1]){s.label=o[1],o=i;break}if(o&&s.label<o[2]){s.label=o[2],s.ops.push(i);break}o[2]&&s.ops.pop(),s.trys.pop();continue}i=t.call(e,s)}catch(e){i=[6,e],n=0}finally{r=o=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,a])}}},s=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});var a=s(r(706)),u=s(r(78)),l=s(r(556)),c=s(r(549)),f=function(e){return"object"==typeof e&&"function"==typeof e.pipe},d=function(e){if("object"!=typeof e||f(e))return{};var t=e.filename,r=e.contentType,o=e.knownLength;return n(n(n({},t?{filename:t}:{filename:"file"}),r&&{contentType:r}),o&&{knownLength:o})},p=function(){function e(e,t){this.username=e.username,this.key=e.key,this.url=e.url,this.headers=e.headers||{},this.formData=t}return e.prototype.request=function(e,t,r){return o(this,void 0,void 0,(function(){var o,s,d,p,h,y,b;return i(this,(function(i){switch(i.label){case 0:return o=a.default(this.username+":"+this.key),s=n(n({Authorization:"Basic "+o},this.headers),null==r?void 0:r.headers),null==r||delete r.headers,s["Content-Type"]||delete s["Content-Type"],d=n({},r),(null==r?void 0:r.query)&&Object.getOwnPropertyNames(null==r?void 0:r.query).length>0&&(d.searchParams=r.query,delete d.query),[4,l.default(u.default(this.url,t),n({method:e.toLocaleUpperCase(),headers:s,throwHttpErrors:!1},d))];case 1:return(null==(p=i.sent())?void 0:p.ok)?[3,6]:(null==p?void 0:p.body)&&f(p.body)?[4,(_=p.body,g=[],new Promise((function(e,t){_.on("data",(function(e){return g.push(e)})),_.on("error",t),_.on("end",(function(){return e(Buffer.concat(g).toString("utf8"))}))})))]:[3,3];case 2:return y=i.sent(),[3,5];case 3:return[4,null==p?void 0:p.json()];case 4:y=i.sent(),i.label=5;case 5:throw h=y,new c.default({status:null==p?void 0:p.status,statusText:null==p?void 0:p.statusText,body:{message:h}});case 6:return b={},[4,null==p?void 0:p.json()];case 7:return[2,(b.body=i.sent(),b.status=null==p?void 0:p.status,b)]}var _,g}))}))},e.prototype.query=function(e,t,r,o){return this.request(e,t,n({query:r},o))},e.prototype.command=function(e,t,r,o){return this.request(e,t,n({headers:{"Content-Type":"application/x-www-form-urlencoded"},body:r},o))},e.prototype.get=function(e,t,r){return this.query("get",e,t,r)},e.prototype.head=function(e,t,r){return this.query("head",e,t,r)},e.prototype.options=function(e,t,r){return this.query("options",e,t,r)},e.prototype.post=function(e,t,r){return this.command("post",e,t,r)},e.prototype.postMulti=function(e,t){var r=new this.formData;return Object.keys(t).filter((function(e){return t[e]})).forEach((function(e){if("attachment"!==e)Array.isArray(t[e])?t[e].forEach((function(t){r.append(e,t)})):r.append(e,t[e]);else{var n=t.attachment;if(Array.isArray(n))n.forEach((function(t){var n=t.data?t.data:t,o=d(t);r.append(e,n,o)}));else{var o=f(n)?n:n.data,i=d(n);r.append(e,o,i)}}})),this.command("post",e,r,{headers:{"Content-Type":null}})},e.prototype.put=function(e,t,r){return this.command("put",e,t,r)},e.prototype.patch=function(e,t,r){return this.command("patch",e,t,r)},e.prototype.delete=function(e,t,r){return this.command("delete",e,t,r)},e}();t.default=p},893:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(e){this.request=e}return e.prototype.list=function(e){return this.request.get("/v3/routes",e).then((function(e){return e.body.items}))},e.prototype.get=function(e){return this.request.get("/v3/routes/"+e).then((function(e){return e.body.route}))},e.prototype.create=function(e){return this.request.post("/v3/routes",e).then((function(e){return e.body.route}))},e.prototype.update=function(e,t){return this.request.put("/v3/routes/"+e,t).then((function(e){return e.body}))},e.prototype.destroy=function(e){return this.request.delete("/v3/routes/"+e).then((function(e){return e.body}))},e}();t.default=r},154:function(e,t,r){"use strict";var n=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});var o=n(r(820)),i=n(r(78)),s=function(e){this.start=new Date(e.start),this.end=new Date(e.end),this.resolution=e.resolution,this.stats=o.default(e.stats,(function(e){return e.time=new Date(e.time),e}))},a=function(){function e(e){this.request=e}return e.prototype._parseStats=function(e){return new s(e.body)},e.prototype.getDomain=function(e,t){return this.request.get(i.default("/v3",e,"stats/total"),t).then(this._parseStats)},e.prototype.getAccount=function(e){return this.request.get("/v3/stats/total",e).then(this._parseStats)},e}();t.default=a},526:function(e,t,r){"use strict";var n=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});var o=n(r(820)),i=n(r(587)),s=n(r(119)),a=n(r(835)),u=n(r(78)),l={headers:{"Content-Type":"application/json"}},c=function(e){this.type="bounces",this.address=e.address,this.code=+e.code,this.error=e.error,this.created_at=new Date(e.created_at)},f=function(e){this.type="complaints",this.address=e.address,this.created_at=new Date(e.created_at)},d=function(e){this.type="unsubscribes",this.address=e.address,this.tags=e.tags,this.created_at=new Date(e.created_at)},p=function(){function e(e){this.request=e,this.models={bounces:c,complaints:f,unsubscribes:d}}return e.prototype._parsePage=function(e,t){var r=a.default.parse(t,!0).query;return{id:e,page:r.page,address:r.address,url:t}},e.prototype._parsePageLinks=function(e){var t=this,r=o.default(e.body.paging,(function(e,r){return t._parsePage(r,e)}));return i.default(r,"id")},e.prototype._parseList=function(e,t){var r={};return r.items=o.default(e.body.items,(function(e){return new t(e)})),r.pages=this._parsePageLinks(e),r},e.prototype._parseItem=function(e,t){return new t(e.body)},e.prototype.list=function(e,t,r){var n=this,o=this.models[t];return this.request.get(u.default("v3",e,t),r).then((function(e){return n._parseList(e,o)}))},e.prototype.get=function(e,t,r){var n=this.models[t],o=s.default(this._parseItem,n);return this.request.get(u.default("v3",e,t,encodeURIComponent(r))).then((function(e){return o(e)}))},e.prototype.create=function(e,t,r){return Array.isArray(r)||(r=[r]),this.request.post(u.default("v3",e,t),r,l).then((function(e){return e.body}))},e.prototype.destroy=function(e,t,r){return this.request.delete(u.default("v3",e,t,encodeURIComponent(r))).then((function(e){return e.body}))},e}();t.default=p,e.exports=p},335:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(e){this.request=e}return e.prototype.get=function(e){return this.request.get("/v3/address/validate",{address:e}).then((function(e){return e.body}))},e}();t.default=r},632:function(e,t,r){"use strict";var n=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});var o=n(r(78)),i=function(e,t){this.id=e,this.url=t.url},s=function(){function e(e){this.request=e}return e.prototype._parseWebhookList=function(e){return e.body.webhooks},e.prototype._parseWebhookWithID=function(e){return function(t){return new i(e,t.body.webhook)}},e.prototype._parseWebhookTest=function(e){return{code:e.body.code,message:e.body.message}},e.prototype.list=function(e,t){return this.request.get(o.default("/v2/domains",e,"webhooks"),t).then(this._parseWebhookList)},e.prototype.get=function(e,t){return this.request.get(o.default("/v2/domains",e,"webhooks",t)).then(this._parseWebhookWithID(t))},e.prototype.create=function(e,t,r,n){return n?this.request.put(o.default("/v2/domains",e,"webhooks",t,"test"),{url:r}).then(this._parseWebhookTest):this.request.post(o.default("/v2/domains",e,"webhooks"),{id:t,url:r}).then(this._parseWebhookWithID(t))},e.prototype.update=function(e,t,r){return this.request.put(o.default("/v2/domains",e,"webhooks",t),{url:r}).then(this._parseWebhookWithID(t))},e.prototype.destroy=function(e,t){return this.request.delete(o.default("/v2/domains",e,"webhooks",t)).then(this._parseWebhookWithID(t))},e}();t.default=s},706:e=>{!function(){"use strict";e.exports=function(e){return(e instanceof Buffer?e:Buffer.from(e.toString(),"binary")).toString("base64")}}()},175:e=>{"use strict";e.exports=function(e){if(!/^data:/i.test(e))throw new TypeError('`uri` does not appear to be a Data URI (must begin with "data:")');const t=(e=e.replace(/\r?\n/g,"")).indexOf(",");if(-1===t||t<=4)throw new TypeError("malformed data: URI");const r=e.substring(5,t).split(";");let n="",o=!1;const i=r[0]||"text/plain";let s=i;for(let e=1;e<r.length;e++)"base64"===r[e]?o=!0:(s+=`;${r[e]}`,0===r[e].indexOf("charset=")&&(n=r[e].substring(8)));r[0]||n.length||(s+=";charset=US-ASCII",n="US-ASCII");const a=o?"base64":"ascii",u=unescape(e.substring(t+1)),l=Buffer.from(u,a);return l.type=i,l.typeFull=s,l.charset=n,l}},185:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0});const r=new WeakMap,n=new WeakMap;function o(e){const t=r.get(e);return console.assert(null!=t,"'this' is expected an Event object, but got",e),t}function i(e){null==e.passiveListener?e.event.cancelable&&(e.canceled=!0,"function"==typeof e.event.preventDefault&&e.event.preventDefault()):"undefined"!=typeof console&&"function"==typeof console.error&&console.error("Unable to preventDefault inside passive event listener invocation.",e.passiveListener)}function s(e,t){r.set(this,{eventTarget:e,event:t,eventPhase:2,currentTarget:e,canceled:!1,stopped:!1,immediateStopped:!1,passiveListener:null,timeStamp:t.timeStamp||Date.now()}),Object.defineProperty(this,"isTrusted",{value:!1,enumerable:!0});const n=Object.keys(t);for(let e=0;e<n.length;++e){const t=n[e];t in this||Object.defineProperty(this,t,a(t))}}function a(e){return{get(){return o(this).event[e]},set(t){o(this).event[e]=t},configurable:!0,enumerable:!0}}function u(e){return{value(){const t=o(this).event;return t[e].apply(t,arguments)},configurable:!0,enumerable:!0}}function l(e){if(null==e||e===Object.prototype)return s;let t=n.get(e);return null==t&&(t=function(e,t){const r=Object.keys(t);if(0===r.length)return e;function n(t,r){e.call(this,t,r)}n.prototype=Object.create(e.prototype,{constructor:{value:n,configurable:!0,writable:!0}});for(let o=0;o<r.length;++o){const i=r[o];if(!(i in e.prototype)){const e="function"==typeof Object.getOwnPropertyDescriptor(t,i).value;Object.defineProperty(n.prototype,i,e?u(i):a(i))}}return n}(l(Object.getPrototypeOf(e)),e),n.set(e,t)),t}function c(e){return o(e).immediateStopped}function f(e,t){o(e).passiveListener=t}s.prototype={get type(){return o(this).event.type},get target(){return o(this).eventTarget},get currentTarget(){return o(this).currentTarget},composedPath(){const e=o(this).currentTarget;return null==e?[]:[e]},get NONE(){return 0},get CAPTURING_PHASE(){return 1},get AT_TARGET(){return 2},get BUBBLING_PHASE(){return 3},get eventPhase(){return o(this).eventPhase},stopPropagation(){const e=o(this);e.stopped=!0,"function"==typeof e.event.stopPropagation&&e.event.stopPropagation()},stopImmediatePropagation(){const e=o(this);e.stopped=!0,e.immediateStopped=!0,"function"==typeof e.event.stopImmediatePropagation&&e.event.stopImmediatePropagation()},get bubbles(){return Boolean(o(this).event.bubbles)},get cancelable(){return Boolean(o(this).event.cancelable)},preventDefault(){i(o(this))},get defaultPrevented(){return o(this).canceled},get composed(){return Boolean(o(this).event.composed)},get timeStamp(){return o(this).timeStamp},get srcElement(){return o(this).eventTarget},get cancelBubble(){return o(this).stopped},set cancelBubble(e){if(!e)return;const t=o(this);t.stopped=!0,"boolean"==typeof t.event.cancelBubble&&(t.event.cancelBubble=!0)},get returnValue(){return!o(this).canceled},set returnValue(e){e||i(o(this))},initEvent(){}},Object.defineProperty(s.prototype,"constructor",{value:s,configurable:!0,writable:!0}),"undefined"!=typeof window&&void 0!==window.Event&&(Object.setPrototypeOf(s.prototype,window.Event.prototype),n.set(window.Event.prototype,s));const d=new WeakMap;function p(e){return null!==e&&"object"==typeof e}function h(e){const t=d.get(e);if(null==t)throw new TypeError("'this' is expected an EventTarget object, but got another value.");return t}function y(e,t){Object.defineProperty(e,`on${t}`,function(e){return{get(){let t=h(this).get(e);for(;null!=t;){if(3===t.listenerType)return t.listener;t=t.next}return null},set(t){"function"==typeof t||p(t)||(t=null);const r=h(this);let n=null,o=r.get(e);for(;null!=o;)3===o.listenerType?null!==n?n.next=o.next:null!==o.next?r.set(e,o.next):r.delete(e):n=o,o=o.next;if(null!==t){const o={listener:t,listenerType:3,passive:!1,once:!1,next:null};null===n?r.set(e,o):n.next=o}},configurable:!0,enumerable:!0}}(t))}function b(e){function t(){_.call(this)}t.prototype=Object.create(_.prototype,{constructor:{value:t,configurable:!0,writable:!0}});for(let r=0;r<e.length;++r)y(t.prototype,e[r]);return t}function _(){if(!(this instanceof _)){if(1===arguments.length&&Array.isArray(arguments[0]))return b(arguments[0]);if(arguments.length>0){const e=new Array(arguments.length);for(let t=0;t<arguments.length;++t)e[t]=arguments[t];return b(e)}throw new TypeError("Cannot call a class as a function")}d.set(this,new Map)}_.prototype={addEventListener(e,t,r){if(null==t)return;if("function"!=typeof t&&!p(t))throw new TypeError("'listener' should be a function or an object.");const n=h(this),o=p(r),i=(o?Boolean(r.capture):Boolean(r))?1:2,s={listener:t,listenerType:i,passive:o&&Boolean(r.passive),once:o&&Boolean(r.once),next:null};let a=n.get(e);if(void 0===a)return void n.set(e,s);let u=null;for(;null!=a;){if(a.listener===t&&a.listenerType===i)return;u=a,a=a.next}u.next=s},removeEventListener(e,t,r){if(null==t)return;const n=h(this),o=(p(r)?Boolean(r.capture):Boolean(r))?1:2;let i=null,s=n.get(e);for(;null!=s;){if(s.listener===t&&s.listenerType===o)return void(null!==i?i.next=s.next:null!==s.next?n.set(e,s.next):n.delete(e));i=s,s=s.next}},dispatchEvent(e){if(null==e||"string"!=typeof e.type)throw new TypeError('"event.type" should be a string.');const t=h(this),r=e.type;let n=t.get(r);if(null==n)return!0;const i=function(e,t){return new(l(Object.getPrototypeOf(t)))(e,t)}(this,e);let s=null;for(;null!=n;){if(n.once?null!==s?s.next=n.next:null!==n.next?t.set(r,n.next):t.delete(r):s=n,f(i,n.passive?n.listener:null),"function"==typeof n.listener)try{n.listener.call(this,i)}catch(e){"undefined"!=typeof console&&"function"==typeof console.error&&console.error(e)}else 3!==n.listenerType&&"function"==typeof n.listener.handleEvent&&n.listener.handleEvent(i);if(c(i))break;n=n.next}return f(i,null),function(e,t){o(e).eventPhase=0}(i),function(e,t){o(e).currentTarget=null}(i),!i.defaultPrevented}},Object.defineProperty(_.prototype,"constructor",{value:_,configurable:!0,writable:!0}),"undefined"!=typeof window&&void 0!==window.EventTarget&&Object.setPrototypeOf(_.prototype,window.EventTarget.prototype),t.defineEventAttribute=y,t.EventTarget=_,t.default=_,e.exports=_,e.exports.EventTarget=e.exports.default=_,e.exports.defineEventAttribute=y},30:(e,t,r)=>{const{Readable:n}=r(413),o=new WeakMap;class i{constructor(e=[],t={type:""}){let r=0;const n=e.map((e=>{let t;return t=e instanceof Buffer?e:ArrayBuffer.isView(e)?Buffer.from(e.buffer,e.byteOffset,e.byteLength):e instanceof ArrayBuffer?Buffer.from(e):e instanceof i?e:Buffer.from("string"==typeof e?e:String(e)),r+=t.length||t.size||0,t})),s=void 0===t.type?"":String(t.type).toLowerCase();o.set(this,{type:/[^\u0020-\u007E]/.test(s)?"":s,size:r,parts:n})}get size(){return o.get(this).size}get type(){return o.get(this).type}async text(){return Buffer.from(await this.arrayBuffer()).toString()}async arrayBuffer(){const e=new Uint8Array(this.size);let t=0;for await(const r of this.stream())e.set(r,t),t+=r.length;return e.buffer}stream(){return n.from(async function*(e){for(const t of e)"stream"in t?yield*t.stream():yield t}(o.get(this).parts))}slice(e=0,t=this.size,r=""){const{size:n}=this;let s=e<0?Math.max(n+e,0):Math.min(e,n),a=t<0?Math.max(n+t,0):Math.min(t,n);const u=Math.max(a-s,0),l=o.get(this).parts.values(),c=[];let f=0;for(const e of l){const t=ArrayBuffer.isView(e)?e.byteLength:e.size;if(s&&t<=s)s-=t,a-=t;else{const r=e.slice(s,Math.min(t,a));if(c.push(r),f+=ArrayBuffer.isView(r)?r.byteLength:r.size,s=0,f>=u)break}}const d=new i([],{type:r});return Object.assign(o.get(d),{size:u,parts:c}),d}get[Symbol.toStringTag](){return"Blob"}static[Symbol.hasInstance](e){return"object"==typeof e&&"function"==typeof e.stream&&0===e.stream.length&&"function"==typeof e.constructor&&/^(Blob|File)$/.test(e[Symbol.toStringTag])}}Object.defineProperties(i.prototype,{size:{enumerable:!0},type:{enumerable:!0},slice:{enumerable:!0}}),e.exports=i},556:(e,t,r)=>{"use strict";const n=r(711),o=r(271);if(global.fetch||(global.fetch=(e,t)=>n(e,{highWaterMark:1e7,...t})),global.Headers||(global.Headers=n.Headers),global.Request||(global.Request=n.Request),global.Response||(global.Response=n.Response),global.AbortController||(global.AbortController=o),!global.ReadableStream)try{global.ReadableStream=r(377)}catch(e){}e.exports=r(721)},721:function(e){var t;t=function(){"use strict";const e={},t=e=>"undefined"!=typeof self&&self&&e in self?self:"undefined"!=typeof window&&window&&e in window?window:"undefined"!=typeof global&&global&&e in global?global:"undefined"!=typeof globalThis&&globalThis?globalThis:void 0,r=["Headers","Request","Response","ReadableStream","fetch","AbortController","FormData"];for(const n of r)Object.defineProperty(e,n,{get(){const e=t(n),r=e&&e[n];return"function"==typeof r?r.bind(e):r}});const n=e=>null!==e&&"object"==typeof e,o="function"==typeof e.AbortController,i="function"==typeof e.ReadableStream,s="function"==typeof e.FormData,a=(t,r)=>{const n=new e.Headers(t||{}),o=r instanceof e.Headers,i=new e.Headers(r||{});for(const[e,t]of i)o&&"undefined"===t||void 0===t?n.delete(e):n.set(e,t);return n},u=(...e)=>{let t={},r={};for(const o of e){if(Array.isArray(o))Array.isArray(t)||(t=[]),t=[...t,...o];else if(n(o)){for(let[e,r]of Object.entries(o))n(r)&&e in t&&(r=u(t[e],r)),t={...t,[e]:r};n(o.headers)&&(r=a(r,o.headers))}t.headers=r}return t},l=["get","post","put","patch","head","delete"],c={json:"application/json",text:"text/*",formData:"multipart/form-data",arrayBuffer:"*/*",blob:"*/*"},f=[413,429,503],d=Symbol("stop");class p extends Error{constructor(e){super(e.statusText||String(0===e.status||e.status?e.status:"Unknown response error")),this.name="HTTPError",this.response=e}}class h extends Error{constructor(e){super("Request timed out"),this.name="TimeoutError",this.request=e}}const y=e=>new Promise((t=>setTimeout(t,e))),b=e=>l.includes(e)?e.toUpperCase():e,_={limit:2,methods:["get","put","head","delete","options","trace"],statusCodes:[408,413,429,500,502,503,504],afterStatusCodes:f},g=(e={})=>{if("number"==typeof e)return{..._,limit:e};if(e.methods&&!Array.isArray(e.methods))throw new Error("retry.methods must be an array");if(e.statusCodes&&!Array.isArray(e.statusCodes))throw new Error("retry.statusCodes must be an array");return{..._,...e,afterStatusCodes:f}},m=2147483647;class v{constructor(t,r={}){if(this._retryCount=0,this._input=t,this._options={credentials:this._input.credentials||"same-origin",...r,headers:a(this._input.headers,r.headers),hooks:u({beforeRequest:[],beforeRetry:[],afterResponse:[]},r.hooks),method:b(r.method||this._input.method),prefixUrl:String(r.prefixUrl||""),retry:g(r.retry),throwHttpErrors:!1!==r.throwHttpErrors,timeout:void 0===r.timeout?1e4:r.timeout,fetch:r.fetch||e.fetch},"string"!=typeof this._input&&!(this._input instanceof URL||this._input instanceof e.Request))throw new TypeError("`input` must be a string, URL, or Request");if(this._options.prefixUrl&&"string"==typeof this._input){if(this._input.startsWith("/"))throw new Error("`input` must not begin with a slash when using `prefixUrl`");this._options.prefixUrl.endsWith("/")||(this._options.prefixUrl+="/"),this._input=this._options.prefixUrl+this._input}if(o&&(this.abortController=new e.AbortController,this._options.signal&&this._options.signal.addEventListener("abort",(()=>{this.abortController.abort()})),this._options.signal=this.abortController.signal),this.request=new e.Request(this._input,this._options),this._options.searchParams){const t="?"+new URLSearchParams(this._options.searchParams).toString(),r=this.request.url.replace(/(?:\?.*?)?(?=#|$)/,t);!(s&&this._options.body instanceof e.FormData||this._options.body instanceof URLSearchParams)||this._options.headers&&this._options.headers["content-type"]||this.request.headers.delete("content-type"),this.request=new e.Request(new e.Request(r,this.request),this._options)}void 0!==this._options.json&&(this._options.body=JSON.stringify(this._options.json),this.request.headers.set("content-type","application/json"),this.request=new e.Request(this.request,{body:this._options.body}));const n=async()=>{if(this._options.timeout>m)throw new RangeError("The `timeout` option cannot be greater than 2147483647");await y(1);let t=await this._fetch();for(const r of this._options.hooks.afterResponse){const n=await r(this.request,this._options,this._decorateResponse(t.clone()));n instanceof e.Response&&(t=n)}if(this._decorateResponse(t),!t.ok&&this._options.throwHttpErrors)throw new p(t);if(this._options.onDownloadProgress){if("function"!=typeof this._options.onDownloadProgress)throw new TypeError("The `onDownloadProgress` option must be a function");if(!i)throw new Error("Streams are not supported in your environment. `ReadableStream` is missing.");return this._stream(t.clone(),this._options.onDownloadProgress)}return t},l=this._options.retry.methods.includes(this.request.method.toLowerCase())?this._retry(n):n();for(const[e,t]of Object.entries(c))l[e]=async()=>{this.request.headers.set("accept",this.request.headers.get("accept")||t);const n=(await l).clone();if("json"===e){if(204===n.status)return"";if(r.parseJson)return r.parseJson(await n.text())}return n[e]()};return l}_calculateRetryDelay(e){if(this._retryCount++,this._retryCount<this._options.retry.limit&&!(e instanceof h)){if(e instanceof p){if(!this._options.retry.statusCodes.includes(e.response.status))return 0;const t=e.response.headers.get("Retry-After");if(t&&this._options.retry.afterStatusCodes.includes(e.response.status)){let e=Number(t);return Number.isNaN(e)?e=Date.parse(t)-Date.now():e*=1e3,void 0!==this._options.retry.maxRetryAfter&&e>this._options.retry.maxRetryAfter?0:e}if(413===e.response.status)return 0}return.3*2**(this._retryCount-1)*1e3}return 0}_decorateResponse(e){return this._options.parseJson&&(e.json=async()=>this._options.parseJson(await e.text())),e}async _retry(e){try{return await e()}catch(t){const r=Math.min(this._calculateRetryDelay(t),m);if(0!==r&&this._retryCount>0){await y(r);for(const e of this._options.hooks.beforeRetry)if(await e({request:this.request,options:this._options,error:t,retryCount:this._retryCount})===d)return;return this._retry(e)}if(this._options.throwHttpErrors)throw t}}async _fetch(){for(const e of this._options.hooks.beforeRequest){const t=await e(this.request,this._options);if(t instanceof Request){this.request=t;break}if(t instanceof Response)return t}return!1===this._options.timeout?this._options.fetch(this.request.clone()):(e=this.request.clone(),t=this.abortController,r=this._options,new Promise(((n,o)=>{const i=setTimeout((()=>{t&&t.abort(),o(new h(e))}),r.timeout);r.fetch(e).then(n).catch(o).then((()=>{clearTimeout(i)}))})));var e,t,r}_stream(t,r){const n=Number(t.headers.get("content-length"))||0;let o=0;return new e.Response(new e.ReadableStream({start(e){const i=t.body.getReader();r&&r({percent:0,transferredBytes:0,totalBytes:n},new Uint8Array),async function t(){const{done:s,value:a}=await i.read();s?e.close():(r&&(o+=a.byteLength,r({percent:0===n?0:o/n,transferredBytes:o,totalBytes:n},a)),e.enqueue(a),t())}()}}))}}const w=(...e)=>{for(const t of e)if((!n(t)||Array.isArray(t))&&void 0!==t)throw new TypeError("The `options` argument must be an object");return u({},...e)},S=e=>{const t=(t,r)=>new v(t,w(e,r));for(const r of l)t[r]=(t,n)=>new v(t,w(e,n,{method:r}));return t.HTTPError=p,t.TimeoutError=h,t.create=e=>S(w(e)),t.extend=t=>S(w(e,t)),t.stop=d,t};return S()},e.exports=t()},402:e=>{var t=9007199254740991,r=/^(?:0|[1-9]\d*)$/;function n(e,t,r){switch(r.length){case 0:return e.call(t);case 1:return e.call(t,r[0]);case 2:return e.call(t,r[0],r[1]);case 3:return e.call(t,r[0],r[1],r[2])}return e.apply(t,r)}var o=Object.prototype,i=o.hasOwnProperty,s=o.toString,a=o.propertyIsEnumerable,u=Math.max;function l(e,t,r,n){return void 0===e||p(e,o[r])&&!i.call(n,r)?t:e}function c(e,t,r){var n=e[t];i.call(e,t)&&p(n,r)&&(void 0!==r||t in e)||(e[t]=r)}function f(e,t){return t=u(void 0===t?e.length-1:t,0),function(){for(var r=arguments,o=-1,i=u(r.length-t,0),s=Array(i);++o<i;)s[o]=r[t+o];o=-1;for(var a=Array(t+1);++o<t;)a[o]=r[o];return a[t]=s,n(e,this,a)}}function d(e,n){return!!(n=null==n?t:n)&&("number"==typeof e||r.test(e))&&e>-1&&e%1==0&&e<n}function p(e,t){return e===t||e!=e&&t!=t}var h=Array.isArray;function y(e){return null!=e&&function(e){return"number"==typeof e&&e>-1&&e%1==0&&e<=t}(e.length)&&!function(e){var t=b(e)?s.call(e):"";return"[object Function]"==t||"[object GeneratorFunction]"==t}(e)}function b(e){var t=typeof e;return!!e&&("object"==t||"function"==t)}var _,g=(_=function(e,t,r,n){!function(e,t,r,n){r||(r={});for(var o=-1,i=t.length;++o<i;){var s=t[o],a=n?n(r[s],e[s],s,r,e):void 0;c(r,s,void 0===a?e[s]:a)}}(t,function(e){return y(e)?function(e,t){var r=h(e)||function(e){return function(e){return function(e){return!!e&&"object"==typeof e}(e)&&y(e)}(e)&&i.call(e,"callee")&&(!a.call(e,"callee")||"[object Arguments]"==s.call(e))}(e)?function(e,t){for(var r=-1,n=Array(e);++r<e;)n[r]=t(r);return n}(e.length,String):[],n=r.length,o=!!n;for(var u in e)!t&&!i.call(e,u)||o&&("length"==u||d(u,n))||r.push(u);return r}(e,!0):function(e){if(!b(e))return function(e){var t=[];if(null!=e)for(var r in Object(e))t.push(r);return t}(e);var t,r,n=(r=(t=e)&&t.constructor,t===("function"==typeof r&&r.prototype||o)),s=[];for(var a in e)("constructor"!=a||!n&&i.call(e,a))&&s.push(a);return s}(e)}(t),e,n)},f((function(e,t){var r=-1,n=t.length,o=n>1?t[n-1]:void 0,i=n>2?t[2]:void 0;for(o=_.length>3&&"function"==typeof o?(n--,o):void 0,i&&function(e,t,r){if(!b(r))return!1;var n=typeof t;return!!("number"==n?y(r)&&d(t,r.length):"string"==n&&t in r)&&p(r[t],e)}(t[0],t[1],i)&&(o=n<3?void 0:o,n=1),e=Object(e);++r<n;){var s=t[r];s&&_(e,s,0,o)}return e}))),m=f((function(e){return e.push(void 0,l),n(g,void 0,e)}));e.exports=m},587:(e,t,r)=>{e=r.nmd(e);var n="__lodash_hash_undefined__",o=9007199254740991,i="[object Arguments]",s="[object Array]",a="[object Boolean]",u="[object Date]",l="[object Error]",c="[object Function]",f="[object Map]",d="[object Number]",p="[object Object]",h="[object Promise]",y="[object RegExp]",b="[object Set]",_="[object String]",g="[object Symbol]",m="[object WeakMap]",v="[object ArrayBuffer]",w="[object DataView]",S=/\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/,T=/^\w*$/,j=/^\./,R=/[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g,P=/\\(\\)?/g,q=/^\[object .+?Constructor\]$/,E=/^(?:0|[1-9]\d*)$/,O={};O["[object Float32Array]"]=O["[object Float64Array]"]=O["[object Int8Array]"]=O["[object Int16Array]"]=O["[object Int32Array]"]=O["[object Uint8Array]"]=O["[object Uint8ClampedArray]"]=O["[object Uint16Array]"]=O["[object Uint32Array]"]=!0,O[i]=O[s]=O[v]=O[a]=O[w]=O[u]=O[l]=O[c]=O[f]=O[d]=O[p]=O[y]=O[b]=O[_]=O[m]=!1;var A="object"==typeof global&&global&&global.Object===Object&&global,k="object"==typeof self&&self&&self.Object===Object&&self,C=A||k||Function("return this")(),x=t&&!t.nodeType&&t,B=x&&e&&!e.nodeType&&e,W=B&&B.exports===x&&A.process,L=function(){try{return W&&W.binding("util")}catch(e){}}(),$=L&&L.isTypedArray;function z(e,t,r,n){for(var o=-1,i=e?e.length:0;++o<i;){var s=e[o];t(n,s,r(s),e)}return n}function M(e,t){for(var r=-1,n=e?e.length:0;++r<n;)if(t(e[r],r,e))return!0;return!1}function I(e){var t=!1;if(null!=e&&"function"!=typeof e.toString)try{t=!!(e+"")}catch(e){}return t}function F(e){var t=-1,r=Array(e.size);return e.forEach((function(e,n){r[++t]=[n,e]})),r}function D(e){var t=-1,r=Array(e.size);return e.forEach((function(e){r[++t]=e})),r}var U,H,N,V=Array.prototype,Q=Function.prototype,Y=Object.prototype,G=C["__core-js_shared__"],J=(U=/[^.]+$/.exec(G&&G.keys&&G.keys.IE_PROTO||""))?"Symbol(src)_1."+U:"",K=Q.toString,Z=Y.hasOwnProperty,X=Y.toString,ee=RegExp("^"+K.call(Z).replace(/[\\^$.*+?()[\]{}|]/g,"\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g,"$1.*?")+"$"),te=C.Symbol,re=C.Uint8Array,ne=Y.propertyIsEnumerable,oe=V.splice,ie=(H=Object.keys,N=Object,function(e){return H(N(e))}),se=Le(C,"DataView"),ae=Le(C,"Map"),ue=Le(C,"Promise"),le=Le(C,"Set"),ce=Le(C,"WeakMap"),fe=Le(Object,"create"),de=He(se),pe=He(ae),he=He(ue),ye=He(le),be=He(ce),_e=te?te.prototype:void 0,ge=_e?_e.valueOf:void 0,me=_e?_e.toString:void 0;function ve(e){var t=-1,r=e?e.length:0;for(this.clear();++t<r;){var n=e[t];this.set(n[0],n[1])}}function we(e){var t=-1,r=e?e.length:0;for(this.clear();++t<r;){var n=e[t];this.set(n[0],n[1])}}function Se(e){var t=-1,r=e?e.length:0;for(this.clear();++t<r;){var n=e[t];this.set(n[0],n[1])}}function Te(e){var t=-1,r=e?e.length:0;for(this.__data__=new Se;++t<r;)this.add(e[t])}function je(e){this.__data__=new we(e)}function Re(e,t){for(var r=e.length;r--;)if(Ye(e[r][0],t))return r;return-1}function Pe(e,t,r,n){return Ee(e,(function(e,o,i){t(n,e,r(e),i)})),n}ve.prototype.clear=function(){this.__data__=fe?fe(null):{}},ve.prototype.delete=function(e){return this.has(e)&&delete this.__data__[e]},ve.prototype.get=function(e){var t=this.__data__;if(fe){var r=t[e];return r===n?void 0:r}return Z.call(t,e)?t[e]:void 0},ve.prototype.has=function(e){var t=this.__data__;return fe?void 0!==t[e]:Z.call(t,e)},ve.prototype.set=function(e,t){return this.__data__[e]=fe&&void 0===t?n:t,this},we.prototype.clear=function(){this.__data__=[]},we.prototype.delete=function(e){var t=this.__data__,r=Re(t,e);return!(r<0||(r==t.length-1?t.pop():oe.call(t,r,1),0))},we.prototype.get=function(e){var t=this.__data__,r=Re(t,e);return r<0?void 0:t[r][1]},we.prototype.has=function(e){return Re(this.__data__,e)>-1},we.prototype.set=function(e,t){var r=this.__data__,n=Re(r,e);return n<0?r.push([e,t]):r[n][1]=t,this},Se.prototype.clear=function(){this.__data__={hash:new ve,map:new(ae||we),string:new ve}},Se.prototype.delete=function(e){return We(this,e).delete(e)},Se.prototype.get=function(e){return We(this,e).get(e)},Se.prototype.has=function(e){return We(this,e).has(e)},Se.prototype.set=function(e,t){return We(this,e).set(e,t),this},Te.prototype.add=Te.prototype.push=function(e){return this.__data__.set(e,n),this},Te.prototype.has=function(e){return this.__data__.has(e)},je.prototype.clear=function(){this.__data__=new we},je.prototype.delete=function(e){return this.__data__.delete(e)},je.prototype.get=function(e){return this.__data__.get(e)},je.prototype.has=function(e){return this.__data__.has(e)},je.prototype.set=function(e,t){var r=this.__data__;if(r instanceof we){var n=r.__data__;if(!ae||n.length<199)return n.push([e,t]),this;r=this.__data__=new Se(n)}return r.set(e,t),this};var qe,Ee=(qe=function(e,t){return e&&Oe(e,t,ot)},function(e,t){if(null==e)return e;if(!Ke(e))return qe(e,t);for(var r=e.length,n=-1,o=Object(e);++n<r&&!1!==t(o[n],n,o););return e}),Oe=function(e,t,r){for(var n=-1,o=Object(e),i=r(e),s=i.length;s--;){var a=i[++n];if(!1===t(o[a],a,o))break}return e};function Ae(e,t){for(var r=0,n=(t=Me(t,e)?[t]:xe(t)).length;null!=e&&r<n;)e=e[Ue(t[r++])];return r&&r==n?e:void 0}function ke(e,t){return null!=e&&t in Object(e)}function Ce(e,t,r,n,o){return e===t||(null==e||null==t||!et(e)&&!tt(t)?e!=e&&t!=t:function(e,t,r,n,o,c){var h=Je(e),m=Je(t),S=s,T=s;h||(S=(S=$e(e))==i?p:S),m||(T=(T=$e(t))==i?p:T);var j=S==p&&!I(e),R=T==p&&!I(t),P=S==T;if(P&&!j)return c||(c=new je),h||nt(e)?Be(e,t,r,n,o,c):function(e,t,r,n,o,i,s){switch(r){case w:if(e.byteLength!=t.byteLength||e.byteOffset!=t.byteOffset)return!1;e=e.buffer,t=t.buffer;case v:return!(e.byteLength!=t.byteLength||!n(new re(e),new re(t)));case a:case u:case d:return Ye(+e,+t);case l:return e.name==t.name&&e.message==t.message;case y:case _:return e==t+"";case f:var c=F;case b:var p=2&i;if(c||(c=D),e.size!=t.size&&!p)return!1;var h=s.get(e);if(h)return h==t;i|=1,s.set(e,t);var m=Be(c(e),c(t),n,o,i,s);return s.delete(e),m;case g:if(ge)return ge.call(e)==ge.call(t)}return!1}(e,t,S,r,n,o,c);if(!(2&o)){var q=j&&Z.call(e,"__wrapped__"),E=R&&Z.call(t,"__wrapped__");if(q||E){var O=q?e.value():e,A=E?t.value():t;return c||(c=new je),r(O,A,n,o,c)}}return!!P&&(c||(c=new je),function(e,t,r,n,o,i){var s=2&o,a=ot(e),u=a.length;if(u!=ot(t).length&&!s)return!1;for(var l=u;l--;){var c=a[l];if(!(s?c in t:Z.call(t,c)))return!1}var f=i.get(e);if(f&&i.get(t))return f==t;var d=!0;i.set(e,t),i.set(t,e);for(var p=s;++l<u;){var h=e[c=a[l]],y=t[c];if(n)var b=s?n(y,h,c,t,e,i):n(h,y,c,e,t,i);if(!(void 0===b?h===y||r(h,y,n,o,i):b)){d=!1;break}p||(p="constructor"==c)}if(d&&!p){var _=e.constructor,g=t.constructor;_==g||!("constructor"in e)||!("constructor"in t)||"function"==typeof _&&_ instanceof _&&"function"==typeof g&&g instanceof g||(d=!1)}return i.delete(e),i.delete(t),d}(e,t,r,n,o,c))}(e,t,Ce,r,n,o))}function xe(e){return Je(e)?e:De(e)}function Be(e,t,r,n,o,i){var s=2&o,a=e.length,u=t.length;if(a!=u&&!(s&&u>a))return!1;var l=i.get(e);if(l&&i.get(t))return l==t;var c=-1,f=!0,d=1&o?new Te:void 0;for(i.set(e,t),i.set(t,e);++c<a;){var p=e[c],h=t[c];if(n)var y=s?n(h,p,c,t,e,i):n(p,h,c,e,t,i);if(void 0!==y){if(y)continue;f=!1;break}if(d){if(!M(t,(function(e,t){if(!d.has(t)&&(p===e||r(p,e,n,o,i)))return d.add(t)}))){f=!1;break}}else if(p!==h&&!r(p,h,n,o,i)){f=!1;break}}return i.delete(e),i.delete(t),f}function We(e,t){var r,n,o=e.__data__;return("string"==(n=typeof(r=t))||"number"==n||"symbol"==n||"boolean"==n?"__proto__"!==r:null===r)?o["string"==typeof t?"string":"hash"]:o.map}function Le(e,t){var r=function(e,t){return null==e?void 0:e[t]}(e,t);return function(e){return!(!et(e)||function(e){return!!J&&J in e}(e))&&(Ze(e)||I(e)?ee:q).test(He(e))}(r)?r:void 0}var $e=function(e){return X.call(e)};function ze(e,t){return!!(t=null==t?o:t)&&("number"==typeof e||E.test(e))&&e>-1&&e%1==0&&e<t}function Me(e,t){if(Je(e))return!1;var r=typeof e;return!("number"!=r&&"symbol"!=r&&"boolean"!=r&&null!=e&&!rt(e))||T.test(e)||!S.test(e)||null!=t&&e in Object(t)}function Ie(e){return e==e&&!et(e)}function Fe(e,t){return function(r){return null!=r&&r[e]===t&&(void 0!==t||e in Object(r))}}(se&&$e(new se(new ArrayBuffer(1)))!=w||ae&&$e(new ae)!=f||ue&&$e(ue.resolve())!=h||le&&$e(new le)!=b||ce&&$e(new ce)!=m)&&($e=function(e){var t=X.call(e),r=t==p?e.constructor:void 0,n=r?He(r):void 0;if(n)switch(n){case de:return w;case pe:return f;case he:return h;case ye:return b;case be:return m}return t});var De=Qe((function(e){var t;e=null==(t=e)?"":function(e){if("string"==typeof e)return e;if(rt(e))return me?me.call(e):"";var t=e+"";return"0"==t&&1/e==-1/0?"-0":t}(t);var r=[];return j.test(e)&&r.push(""),e.replace(R,(function(e,t,n,o){r.push(n?o.replace(P,"$1"):t||e)})),r}));function Ue(e){if("string"==typeof e||rt(e))return e;var t=e+"";return"0"==t&&1/e==-1/0?"-0":t}function He(e){if(null!=e){try{return K.call(e)}catch(e){}try{return e+""}catch(e){}}return""}var Ne,Ve=(Ne=function(e,t,r){e[r]=t},function(e,t){var r,n,o,i,s,a={};return(Je(e)?z:Pe)(e,Ne,"function"==typeof(r=t)?r:null==r?it:"object"==typeof r?Je(r)?function(e,t){return Me(e)&&Ie(t)?Fe(Ue(e),t):function(r){var n=function(e,t,r){var n=null==e?void 0:Ae(e,t);return void 0===n?void 0:n}(r,e);return void 0===n&&n===t?function(e,t){return null!=e&&function(e,t,r){for(var n,o=-1,i=(t=Me(t,e)?[t]:xe(t)).length;++o<i;){var s=Ue(t[o]);if(!(n=null!=e&&r(e,s)))break;e=e[s]}return n||!!(i=e?e.length:0)&&Xe(i)&&ze(s,i)&&(Je(e)||Ge(e))}(e,t,ke)}(r,e):Ce(t,n,void 0,3)}}(r[0],r[1]):1==(o=function(e){for(var t=ot(e),r=t.length;r--;){var n=t[r],o=e[n];t[r]=[n,o,Ie(o)]}return t}(n=r)).length&&o[0][2]?Fe(o[0][0],o[0][1]):function(e){return e===n||function(e,t,r,n){var o=r.length,i=o;if(null==e)return!i;for(e=Object(e);o--;){var s=r[o];if(s[2]?s[1]!==e[s[0]]:!(s[0]in e))return!1}for(;++o<i;){var a=(s=r[o])[0],u=e[a],l=s[1];if(s[2]){if(void 0===u&&!(a in e))return!1}else{var c,f=new je;if(!(void 0===c?Ce(l,u,n,3,f):c))return!1}}return!0}(e,0,o)}:Me(i=r)?(s=Ue(i),function(e){return null==e?void 0:e[s]}):function(e){return function(t){return Ae(t,e)}}(i),a)});function Qe(e,t){if("function"!=typeof e||t&&"function"!=typeof t)throw new TypeError("Expected a function");var r=function(){var n=arguments,o=t?t.apply(this,n):n[0],i=r.cache;if(i.has(o))return i.get(o);var s=e.apply(this,n);return r.cache=i.set(o,s),s};return r.cache=new(Qe.Cache||Se),r}function Ye(e,t){return e===t||e!=e&&t!=t}function Ge(e){return function(e){return tt(e)&&Ke(e)}(e)&&Z.call(e,"callee")&&(!ne.call(e,"callee")||X.call(e)==i)}Qe.Cache=Se;var Je=Array.isArray;function Ke(e){return null!=e&&Xe(e.length)&&!Ze(e)}function Ze(e){var t=et(e)?X.call(e):"";return t==c||"[object GeneratorFunction]"==t}function Xe(e){return"number"==typeof e&&e>-1&&e%1==0&&e<=o}function et(e){var t=typeof e;return!!e&&("object"==t||"function"==t)}function tt(e){return!!e&&"object"==typeof e}function rt(e){return"symbol"==typeof e||tt(e)&&X.call(e)==g}var nt=$?function(e){return function(t){return e(t)}}($):function(e){return tt(e)&&Xe(e.length)&&!!O[X.call(e)]};function ot(e){return Ke(e)?function(e,t){var r=Je(e)||Ge(e)?function(e,t){for(var r=-1,n=Array(e);++r<e;)n[r]=t(r);return n}(e.length,String):[],n=r.length,o=!!n;for(var i in e)!t&&!Z.call(e,i)||o&&("length"==i||ze(i,n))||r.push(i);return r}(e):function(e){if(r=(t=e)&&t.constructor,t!==("function"==typeof r&&r.prototype||Y))return ie(e);var t,r,n=[];for(var o in Object(e))Z.call(e,o)&&"constructor"!=o&&n.push(o);return n}(e)}function it(e){return e}e.exports=Ve},820:(e,t,r)=>{e=r.nmd(e);var n="__lodash_hash_undefined__",o=9007199254740991,i="[object Arguments]",s="[object Array]",a="[object Boolean]",u="[object Date]",l="[object Error]",c="[object Function]",f="[object Map]",d="[object Number]",p="[object Object]",h="[object Promise]",y="[object RegExp]",b="[object Set]",_="[object String]",g="[object Symbol]",m="[object WeakMap]",v="[object ArrayBuffer]",w="[object DataView]",S=/\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/,T=/^\w*$/,j=/^\./,R=/[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g,P=/\\(\\)?/g,q=/^\[object .+?Constructor\]$/,E=/^(?:0|[1-9]\d*)$/,O={};O["[object Float32Array]"]=O["[object Float64Array]"]=O["[object Int8Array]"]=O["[object Int16Array]"]=O["[object Int32Array]"]=O["[object Uint8Array]"]=O["[object Uint8ClampedArray]"]=O["[object Uint16Array]"]=O["[object Uint32Array]"]=!0,O[i]=O[s]=O[v]=O[a]=O[w]=O[u]=O[l]=O[c]=O[f]=O[d]=O[p]=O[y]=O[b]=O[_]=O[m]=!1;var A="object"==typeof global&&global&&global.Object===Object&&global,k="object"==typeof self&&self&&self.Object===Object&&self,C=A||k||Function("return this")(),x=t&&!t.nodeType&&t,B=x&&e&&!e.nodeType&&e,W=B&&B.exports===x&&A.process,L=function(){try{return W&&W.binding("util")}catch(e){}}(),$=L&&L.isTypedArray;function z(e,t){for(var r=-1,n=e?e.length:0,o=Array(n);++r<n;)o[r]=t(e[r],r,e);return o}function M(e,t){for(var r=-1,n=e?e.length:0;++r<n;)if(t(e[r],r,e))return!0;return!1}function I(e){var t=!1;if(null!=e&&"function"!=typeof e.toString)try{t=!!(e+"")}catch(e){}return t}function F(e){var t=-1,r=Array(e.size);return e.forEach((function(e,n){r[++t]=[n,e]})),r}function D(e){var t=-1,r=Array(e.size);return e.forEach((function(e){r[++t]=e})),r}var U,H,N,V=Array.prototype,Q=Function.prototype,Y=Object.prototype,G=C["__core-js_shared__"],J=(U=/[^.]+$/.exec(G&&G.keys&&G.keys.IE_PROTO||""))?"Symbol(src)_1."+U:"",K=Q.toString,Z=Y.hasOwnProperty,X=Y.toString,ee=RegExp("^"+K.call(Z).replace(/[\\^$.*+?()[\]{}|]/g,"\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g,"$1.*?")+"$"),te=C.Symbol,re=C.Uint8Array,ne=Y.propertyIsEnumerable,oe=V.splice,ie=(H=Object.keys,N=Object,function(e){return H(N(e))}),se=Le(C,"DataView"),ae=Le(C,"Map"),ue=Le(C,"Promise"),le=Le(C,"Set"),ce=Le(C,"WeakMap"),fe=Le(Object,"create"),de=He(se),pe=He(ae),he=He(ue),ye=He(le),be=He(ce),_e=te?te.prototype:void 0,ge=_e?_e.valueOf:void 0,me=_e?_e.toString:void 0;function ve(e){var t=-1,r=e?e.length:0;for(this.clear();++t<r;){var n=e[t];this.set(n[0],n[1])}}function we(e){var t=-1,r=e?e.length:0;for(this.clear();++t<r;){var n=e[t];this.set(n[0],n[1])}}function Se(e){var t=-1,r=e?e.length:0;for(this.clear();++t<r;){var n=e[t];this.set(n[0],n[1])}}function Te(e){var t=-1,r=e?e.length:0;for(this.__data__=new Se;++t<r;)this.add(e[t])}function je(e){this.__data__=new we(e)}function Re(e,t){for(var r=e.length;r--;)if(Ve(e[r][0],t))return r;return-1}ve.prototype.clear=function(){this.__data__=fe?fe(null):{}},ve.prototype.delete=function(e){return this.has(e)&&delete this.__data__[e]},ve.prototype.get=function(e){var t=this.__data__;if(fe){var r=t[e];return r===n?void 0:r}return Z.call(t,e)?t[e]:void 0},ve.prototype.has=function(e){var t=this.__data__;return fe?void 0!==t[e]:Z.call(t,e)},ve.prototype.set=function(e,t){return this.__data__[e]=fe&&void 0===t?n:t,this},we.prototype.clear=function(){this.__data__=[]},we.prototype.delete=function(e){var t=this.__data__,r=Re(t,e);return!(r<0||(r==t.length-1?t.pop():oe.call(t,r,1),0))},we.prototype.get=function(e){var t=this.__data__,r=Re(t,e);return r<0?void 0:t[r][1]},we.prototype.has=function(e){return Re(this.__data__,e)>-1},we.prototype.set=function(e,t){var r=this.__data__,n=Re(r,e);return n<0?r.push([e,t]):r[n][1]=t,this},Se.prototype.clear=function(){this.__data__={hash:new ve,map:new(ae||we),string:new ve}},Se.prototype.delete=function(e){return We(this,e).delete(e)},Se.prototype.get=function(e){return We(this,e).get(e)},Se.prototype.has=function(e){return We(this,e).has(e)},Se.prototype.set=function(e,t){return We(this,e).set(e,t),this},Te.prototype.add=Te.prototype.push=function(e){return this.__data__.set(e,n),this},Te.prototype.has=function(e){return this.__data__.has(e)},je.prototype.clear=function(){this.__data__=new we},je.prototype.delete=function(e){return this.__data__.delete(e)},je.prototype.get=function(e){return this.__data__.get(e)},je.prototype.has=function(e){return this.__data__.has(e)},je.prototype.set=function(e,t){var r=this.__data__;if(r instanceof we){var n=r.__data__;if(!ae||n.length<199)return n.push([e,t]),this;r=this.__data__=new Se(n)}return r.set(e,t),this};var Pe,qe=(Pe=function(e,t){return e&&Ee(e,t,rt)},function(e,t){if(null==e)return e;if(!Ge(e))return Pe(e,t);for(var r=e.length,n=-1,o=Object(e);++n<r&&!1!==t(o[n],n,o););return e}),Ee=function(e,t,r){for(var n=-1,o=Object(e),i=r(e),s=i.length;s--;){var a=i[++n];if(!1===t(o[a],a,o))break}return e};function Oe(e,t){for(var r=0,n=(t=Me(t,e)?[t]:xe(t)).length;null!=e&&r<n;)e=e[Ue(t[r++])];return r&&r==n?e:void 0}function Ae(e,t){return null!=e&&t in Object(e)}function ke(e,t,r,n,o){return e===t||(null==e||null==t||!Ze(e)&&!Xe(t)?e!=e&&t!=t:function(e,t,r,n,o,c){var h=Ye(e),m=Ye(t),S=s,T=s;h||(S=(S=$e(e))==i?p:S),m||(T=(T=$e(t))==i?p:T);var j=S==p&&!I(e),R=T==p&&!I(t),P=S==T;if(P&&!j)return c||(c=new je),h||tt(e)?Be(e,t,r,n,o,c):function(e,t,r,n,o,i,s){switch(r){case w:if(e.byteLength!=t.byteLength||e.byteOffset!=t.byteOffset)return!1;e=e.buffer,t=t.buffer;case v:return!(e.byteLength!=t.byteLength||!n(new re(e),new re(t)));case a:case u:case d:return Ve(+e,+t);case l:return e.name==t.name&&e.message==t.message;case y:case _:return e==t+"";case f:var c=F;case b:var p=2&i;if(c||(c=D),e.size!=t.size&&!p)return!1;var h=s.get(e);if(h)return h==t;i|=1,s.set(e,t);var m=Be(c(e),c(t),n,o,i,s);return s.delete(e),m;case g:if(ge)return ge.call(e)==ge.call(t)}return!1}(e,t,S,r,n,o,c);if(!(2&o)){var q=j&&Z.call(e,"__wrapped__"),E=R&&Z.call(t,"__wrapped__");if(q||E){var O=q?e.value():e,A=E?t.value():t;return c||(c=new je),r(O,A,n,o,c)}}return!!P&&(c||(c=new je),function(e,t,r,n,o,i){var s=2&o,a=rt(e),u=a.length;if(u!=rt(t).length&&!s)return!1;for(var l=u;l--;){var c=a[l];if(!(s?c in t:Z.call(t,c)))return!1}var f=i.get(e);if(f&&i.get(t))return f==t;var d=!0;i.set(e,t),i.set(t,e);for(var p=s;++l<u;){var h=e[c=a[l]],y=t[c];if(n)var b=s?n(y,h,c,t,e,i):n(h,y,c,e,t,i);if(!(void 0===b?h===y||r(h,y,n,o,i):b)){d=!1;break}p||(p="constructor"==c)}if(d&&!p){var _=e.constructor,g=t.constructor;_==g||!("constructor"in e)||!("constructor"in t)||"function"==typeof _&&_ instanceof _&&"function"==typeof g&&g instanceof g||(d=!1)}return i.delete(e),i.delete(t),d}(e,t,r,n,o,c))}(e,t,ke,r,n,o))}function Ce(e,t){var r=-1,n=Ge(e)?Array(e.length):[];return qe(e,(function(e,o,i){n[++r]=t(e,o,i)})),n}function xe(e){return Ye(e)?e:De(e)}function Be(e,t,r,n,o,i){var s=2&o,a=e.length,u=t.length;if(a!=u&&!(s&&u>a))return!1;var l=i.get(e);if(l&&i.get(t))return l==t;var c=-1,f=!0,d=1&o?new Te:void 0;for(i.set(e,t),i.set(t,e);++c<a;){var p=e[c],h=t[c];if(n)var y=s?n(h,p,c,t,e,i):n(p,h,c,e,t,i);if(void 0!==y){if(y)continue;f=!1;break}if(d){if(!M(t,(function(e,t){if(!d.has(t)&&(p===e||r(p,e,n,o,i)))return d.add(t)}))){f=!1;break}}else if(p!==h&&!r(p,h,n,o,i)){f=!1;break}}return i.delete(e),i.delete(t),f}function We(e,t){var r,n,o=e.__data__;return("string"==(n=typeof(r=t))||"number"==n||"symbol"==n||"boolean"==n?"__proto__"!==r:null===r)?o["string"==typeof t?"string":"hash"]:o.map}function Le(e,t){var r=function(e,t){return null==e?void 0:e[t]}(e,t);return function(e){return!(!Ze(e)||function(e){return!!J&&J in e}(e))&&(Je(e)||I(e)?ee:q).test(He(e))}(r)?r:void 0}var $e=function(e){return X.call(e)};function ze(e,t){return!!(t=null==t?o:t)&&("number"==typeof e||E.test(e))&&e>-1&&e%1==0&&e<t}function Me(e,t){if(Ye(e))return!1;var r=typeof e;return!("number"!=r&&"symbol"!=r&&"boolean"!=r&&null!=e&&!et(e))||T.test(e)||!S.test(e)||null!=t&&e in Object(t)}function Ie(e){return e==e&&!Ze(e)}function Fe(e,t){return function(r){return null!=r&&r[e]===t&&(void 0!==t||e in Object(r))}}(se&&$e(new se(new ArrayBuffer(1)))!=w||ae&&$e(new ae)!=f||ue&&$e(ue.resolve())!=h||le&&$e(new le)!=b||ce&&$e(new ce)!=m)&&($e=function(e){var t=X.call(e),r=t==p?e.constructor:void 0,n=r?He(r):void 0;if(n)switch(n){case de:return w;case pe:return f;case he:return h;case ye:return b;case be:return m}return t});var De=Ne((function(e){var t;e=null==(t=e)?"":function(e){if("string"==typeof e)return e;if(et(e))return me?me.call(e):"";var t=e+"";return"0"==t&&1/e==-1/0?"-0":t}(t);var r=[];return j.test(e)&&r.push(""),e.replace(R,(function(e,t,n,o){r.push(n?o.replace(P,"$1"):t||e)})),r}));function Ue(e){if("string"==typeof e||et(e))return e;var t=e+"";return"0"==t&&1/e==-1/0?"-0":t}function He(e){if(null!=e){try{return K.call(e)}catch(e){}try{return e+""}catch(e){}}return""}function Ne(e,t){if("function"!=typeof e||t&&"function"!=typeof t)throw new TypeError("Expected a function");var r=function(){var n=arguments,o=t?t.apply(this,n):n[0],i=r.cache;if(i.has(o))return i.get(o);var s=e.apply(this,n);return r.cache=i.set(o,s),s};return r.cache=new(Ne.Cache||Se),r}function Ve(e,t){return e===t||e!=e&&t!=t}function Qe(e){return function(e){return Xe(e)&&Ge(e)}(e)&&Z.call(e,"callee")&&(!ne.call(e,"callee")||X.call(e)==i)}Ne.Cache=Se;var Ye=Array.isArray;function Ge(e){return null!=e&&Ke(e.length)&&!Je(e)}function Je(e){var t=Ze(e)?X.call(e):"";return t==c||"[object GeneratorFunction]"==t}function Ke(e){return"number"==typeof e&&e>-1&&e%1==0&&e<=o}function Ze(e){var t=typeof e;return!!e&&("object"==t||"function"==t)}function Xe(e){return!!e&&"object"==typeof e}function et(e){return"symbol"==typeof e||Xe(e)&&X.call(e)==g}var tt=$?function(e){return function(t){return e(t)}}($):function(e){return Xe(e)&&Ke(e.length)&&!!O[X.call(e)]};function rt(e){return Ge(e)?function(e,t){var r=Ye(e)||Qe(e)?function(e,t){for(var r=-1,n=Array(e);++r<e;)n[r]=t(r);return n}(e.length,String):[],n=r.length,o=!!n;for(var i in e)!t&&!Z.call(e,i)||o&&("length"==i||ze(i,n))||r.push(i);return r}(e):function(e){if(r=(t=e)&&t.constructor,t!==("function"==typeof r&&r.prototype||Y))return ie(e);var t,r,n=[];for(var o in Object(e))Z.call(e,o)&&"constructor"!=o&&n.push(o);return n}(e)}function nt(e){return e}e.exports=function(e,t){return(Ye(e)?z:Ce)(e,"function"==typeof(r=t)?r:null==r?nt:"object"==typeof r?Ye(r)?function(e,t){return Me(e)&&Ie(t)?Fe(Ue(e),t):function(r){var n=function(e,t,r){var n=null==e?void 0:Oe(e,t);return void 0===n?void 0:n}(r,e);return void 0===n&&n===t?function(e,t){return null!=e&&function(e,t,r){for(var n,o=-1,i=(t=Me(t,e)?[t]:xe(t)).length;++o<i;){var s=Ue(t[o]);if(!(n=null!=e&&r(e,s)))break;e=e[s]}return n||!!(i=e?e.length:0)&&Ke(i)&&ze(s,i)&&(Ye(e)||Qe(e))}(e,t,Ae)}(r,e):ke(t,n,void 0,3)}}(r[0],r[1]):1==(o=function(e){for(var t=rt(e),r=t.length;r--;){var n=t[r],o=e[n];t[r]=[n,o,Ie(o)]}return t}(n=r)).length&&o[0][2]?Fe(o[0][0],o[0][1]):function(e){return e===n||function(e,t,r,n){var o=r.length,i=o;if(null==e)return!i;for(e=Object(e);o--;){var s=r[o];if(s[2]?s[1]!==e[s[0]]:!(s[0]in e))return!1}for(;++o<i;){var a=(s=r[o])[0],u=e[a],l=s[1];if(s[2]){if(void 0===u&&!(a in e))return!1}else{var c,f=new je;if(!(void 0===c?ke(l,u,n,3,f):c))return!1}}return!0}(e,0,o)}:Me(i=r)?(s=Ue(i),function(e){return null==e?void 0:e[s]}):function(e){return function(t){return Oe(t,e)}}(i));var r,n,o,i,s}},119:e=>{var t="__lodash_placeholder__",r=[["ary",128],["bind",1],["bindKey",2],["curry",8],["curryRight",16],["flip",512],["partial",32],["partialRight",64],["rearg",256]],n=/^\s+|\s+$/g,o=/\{(?:\n\/\* \[wrapped with .+\] \*\/)?\n?/,i=/\{\n\/\* \[wrapped with (.+)\] \*/,s=/,? & /,a=/^[-+]0x[0-9a-f]+$/i,u=/^0b[01]+$/i,l=/^\[object .+?Constructor\]$/,c=/^0o[0-7]+$/i,f=/^(?:0|[1-9]\d*)$/,d=parseInt,p="object"==typeof global&&global&&global.Object===Object&&global,h="object"==typeof self&&self&&self.Object===Object&&self,y=p||h||Function("return this")();function b(e,t,r){switch(r.length){case 0:return e.call(t);case 1:return e.call(t,r[0]);case 2:return e.call(t,r[0],r[1]);case 3:return e.call(t,r[0],r[1],r[2])}return e.apply(t,r)}function _(e){return e!=e}function g(e,t){for(var r=e.length,n=0;r--;)e[r]===t&&n++;return n}function m(e,r){for(var n=-1,o=e.length,i=0,s=[];++n<o;){var a=e[n];a!==r&&a!==t||(e[n]=t,s[i++]=n)}return s}var v,w,S,T=Function.prototype,j=Object.prototype,R=y["__core-js_shared__"],P=(v=/[^.]+$/.exec(R&&R.keys&&R.keys.IE_PROTO||""))?"Symbol(src)_1."+v:"",q=T.toString,E=j.hasOwnProperty,O=j.toString,A=RegExp("^"+q.call(E).replace(/[\\^$.*+?()[\]{}|]/g,"\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g,"$1.*?")+"$"),k=Object.create,C=Math.max,x=Math.min,B=(w=D(Object,"defineProperty"),(S=D.name)&&S.length>2?w:void 0);function W(e){return J(e)?k(e):{}}function L(e,t,r,n){for(var o=-1,i=e.length,s=r.length,a=-1,u=t.length,l=C(i-s,0),c=Array(u+l),f=!n;++a<u;)c[a]=t[a];for(;++o<s;)(f||o<i)&&(c[r[o]]=e[o]);for(;l--;)c[a++]=e[o++];return c}function $(e,t,r,n){for(var o=-1,i=e.length,s=-1,a=r.length,u=-1,l=t.length,c=C(i-a,0),f=Array(c+l),d=!n;++o<c;)f[o]=e[o];for(var p=o;++u<l;)f[p+u]=t[u];for(;++s<a;)(d||o<i)&&(f[p+r[s]]=e[o++]);return f}function z(e){return function(){var t=arguments;switch(t.length){case 0:return new e;case 1:return new e(t[0]);case 2:return new e(t[0],t[1]);case 3:return new e(t[0],t[1],t[2]);case 4:return new e(t[0],t[1],t[2],t[3]);case 5:return new e(t[0],t[1],t[2],t[3],t[4]);case 6:return new e(t[0],t[1],t[2],t[3],t[4],t[5]);case 7:return new e(t[0],t[1],t[2],t[3],t[4],t[5],t[6])}var r=W(e.prototype),n=e.apply(r,t);return J(n)?n:r}}function M(e,t,r,n,o,i,s,a,u,l){var c=128&t,f=1&t,d=2&t,p=24&t,h=512&t,b=d?void 0:z(e);return function _(){for(var v=arguments.length,w=Array(v),S=v;S--;)w[S]=arguments[S];if(p)var T=F(_),j=g(w,T);if(n&&(w=L(w,n,o,p)),i&&(w=$(w,i,s,p)),v-=j,p&&v<l){var R=m(w,T);return I(e,t,M,_.placeholder,r,w,R,a,u,l-v)}var P=f?r:this,q=d?P[e]:e;return v=w.length,a?w=V(w,a):h&&v>1&&w.reverse(),c&&u<v&&(w.length=u),this&&this!==y&&this instanceof _&&(q=b||z(q)),q.apply(P,w)}}function I(e,t,r,n,o,i,s,a,u,l){var c=8&t;t|=c?32:64,4&(t&=~(c?64:32))||(t&=-4);var f=r(e,t,o,c?i:void 0,c?s:void 0,c?void 0:i,c?void 0:s,a,u,l);return f.placeholder=n,Q(f,e,t)}function F(e){return e.placeholder}function D(e,t){var r=function(e,t){return null==e?void 0:e[t]}(e,t);return function(e){return!(!J(e)||function(e){return!!P&&P in e}(e))&&(function(e){var t=J(e)?O.call(e):"";return"[object Function]"==t||"[object GeneratorFunction]"==t}(e)||function(e){var t=!1;if(null!=e&&"function"!=typeof e.toString)try{t=!!(e+"")}catch(e){}return t}(e)?A:l).test(function(e){if(null!=e){try{return q.call(e)}catch(e){}try{return e+""}catch(e){}}return""}(e))}(r)?r:void 0}function U(e){var t=e.match(i);return t?t[1].split(s):[]}function H(e,t){var r=t.length,n=r-1;return t[n]=(r>1?"& ":"")+t[n],t=t.join(r>2?", ":" "),e.replace(o,"{\n/* [wrapped with "+t+"] */\n")}function N(e,t){return!!(t=null==t?9007199254740991:t)&&("number"==typeof e||f.test(e))&&e>-1&&e%1==0&&e<t}function V(e,t){for(var r=e.length,n=x(t.length,r),o=function(e,t){var r=-1,n=e.length;for(t||(t=Array(n));++r<n;)t[r]=e[r];return t}(e);n--;){var i=t[n];e[n]=N(i,r)?o[i]:void 0}return e}var Q=B?function(e,t,r){var n,o=t+"";return B(e,"toString",{configurable:!0,enumerable:!1,value:(n=H(o,Y(U(o),r)),function(){return n})})}:function(e){return e};function Y(e,t){return function(r,n){for(var o=-1,i=r?r.length:0;++o<i&&!1!==(a=void 0,a="_."+(s=r[o])[0],void(t&s[1]&&!function(e,t){return!(!e||!e.length)&&function(e,t,r){if(t!=t)return function(e,t,r,n){for(var o=e.length,i=-1;++i<o;)if(t(e[i],i,e))return i;return-1}(e,_);for(var n=-1,o=e.length;++n<o;)if(e[n]===t)return n;return-1}(e,t)>-1}(e,a)&&e.push(a))););var s,a}(r),e.sort()}var G=function(e,t){return t=C(void 0===t?e.length-1:t,0),function(){for(var r=arguments,n=-1,o=C(r.length-t,0),i=Array(o);++n<o;)i[n]=r[t+n];n=-1;for(var s=Array(t+1);++n<t;)s[n]=r[n];return s[t]=i,b(e,this,s)}}((function(e,t){return function(e,t,r,n,o,i,s,a){var u=2&t;if(!u&&"function"!=typeof e)throw new TypeError("Expected a function");var l=n?n.length:0;if(l||(t&=-97,n=o=void 0),s=void 0===s?s:C(K(s),0),a=void 0===a?a:K(a),l-=o?o.length:0,64&t){var c=n,f=o;n=o=void 0}var d=[e,t,r,n,o,c,f,i,s,a];if(e=d[0],t=d[1],r=d[2],n=d[3],o=d[4],!(a=d[9]=null==d[9]?u?0:e.length:C(d[9]-l,0))&&24&t&&(t&=-25),t&&1!=t)p=8==t||16==t?function(e,t,r){var n=z(e);return function o(){for(var i=arguments.length,s=Array(i),a=i,u=F(o);a--;)s[a]=arguments[a];var l=i<3&&s[0]!==u&&s[i-1]!==u?[]:m(s,u);return(i-=l.length)<r?I(e,t,M,o.placeholder,void 0,s,l,void 0,void 0,r-i):b(this&&this!==y&&this instanceof o?n:e,this,s)}}(e,t,a):32!=t&&33!=t||o.length?M.apply(void 0,d):function(e,t,r,n){var o=1&t,i=z(e);return function t(){for(var s=-1,a=arguments.length,u=-1,l=n.length,c=Array(l+a),f=this&&this!==y&&this instanceof t?i:e;++u<l;)c[u]=n[u];for(;a--;)c[u++]=arguments[++s];return b(f,o?r:this,c)}}(e,t,r,n);else var p=function(e,t,r){var n=1&t,o=z(e);return function t(){return(this&&this!==y&&this instanceof t?o:e).apply(n?r:this,arguments)}}(e,t,r);return Q(p,e,t)}(e,64,void 0,t,m(t,F(G)))}));function J(e){var t=typeof e;return!!e&&("object"==t||"function"==t)}function K(e){var t=function(e){return e?1/0===(e=function(e){if("number"==typeof e)return e;if(function(e){return"symbol"==typeof e||function(e){return!!e&&"object"==typeof e}(e)&&"[object Symbol]"==O.call(e)}(e))return NaN;if(J(e)){var t="function"==typeof e.valueOf?e.valueOf():e;e=J(t)?t+"":t}if("string"!=typeof e)return 0===e?e:+e;e=e.replace(n,"");var r=u.test(e);return r||c.test(e)?d(e.slice(2),r?2:8):a.test(e)?NaN:+e}(e))||e===-1/0?17976931348623157e292*(e<0?-1:1):e==e?e:0:0===e?e:0}(e),r=t%1;return t==t?r?t-r:t:0}G.placeholder={},e.exports=G},711:(e,t,r)=>{"use strict";t=e.exports=I;const n=r(605),o=r(211),i=r(761),s=r(413),a=r(175),u=r(669),l=r(30),c=r(417),f=r(835);class d extends Error{constructor(e,t){super(e),Error.captureStackTrace(this,this.constructor),this.type=t}get name(){return this.constructor.name}get[Symbol.toStringTag](){return this.constructor.name}}class p extends d{constructor(e,t,r){super(e,t),r&&(this.code=this.errno=r.code,this.erroredSysCall=r.syscall)}}const h=Symbol.toStringTag,y=e=>"object"==typeof e&&"function"==typeof e.append&&"function"==typeof e.delete&&"function"==typeof e.get&&"function"==typeof e.getAll&&"function"==typeof e.has&&"function"==typeof e.set&&"function"==typeof e.sort&&"URLSearchParams"===e[h],b=e=>"object"==typeof e&&"function"==typeof e.arrayBuffer&&"string"==typeof e.type&&"function"==typeof e.stream&&"function"==typeof e.constructor&&/^(Blob|File)$/.test(e[h]);function _(e){return"object"==typeof e&&"function"==typeof e.append&&"function"==typeof e.set&&"function"==typeof e.get&&"function"==typeof e.getAll&&"function"==typeof e.delete&&"function"==typeof e.keys&&"function"==typeof e.values&&"function"==typeof e.entries&&"function"==typeof e.constructor&&"FormData"===e[h]}const g="\r\n",m="-".repeat(2),v=Buffer.byteLength(g),w=e=>`${m}${e}${m}${g.repeat(2)}`;function S(e,t,r){let n="";return n+=`${m}${e}\r\n`,n+=`Content-Disposition: form-data; name="${t}"`,b(r)&&(n+=`; filename="${r.name}"\r\n`,n+=`Content-Type: ${r.type||"application/octet-stream"}`),`${n}${g.repeat(2)}`}const T=Symbol("Body internals");class j{constructor(e,{size:t=0}={}){let r=null;null===e?e=null:y(e)?e=Buffer.from(e.toString()):b(e)||Buffer.isBuffer(e)||(u.types.isAnyArrayBuffer(e)?e=Buffer.from(e):ArrayBuffer.isView(e)?e=Buffer.from(e.buffer,e.byteOffset,e.byteLength):e instanceof s||(_(e)?(r=`NodeFetchFormDataBoundary${c.randomBytes(8).toString("hex")}`,e=s.Readable.from(async function*(e,t){for(const[r,n]of e)yield S(t,r,n),b(n)?yield*n.stream():yield n,yield g;yield w(t)}(e,r))):e=Buffer.from(String(e)))),this[T]={body:e,boundary:r,disturbed:!1,error:null},this.size=t,e instanceof s&&e.on("error",(e=>{const t=e instanceof d?e:new p(`Invalid response body while trying to fetch ${this.url}: ${e.message}`,"system",e);this[T].error=t}))}get body(){return this[T].body}get bodyUsed(){return this[T].disturbed}async arrayBuffer(){const{buffer:e,byteOffset:t,byteLength:r}=await R(this);return e.slice(t,t+r)}async blob(){const e=this.headers&&this.headers.get("content-type")||this[T].body&&this[T].body.type||"",t=await this.buffer();return new l([t],{type:e})}async json(){const e=await R(this);return JSON.parse(e.toString())}async text(){return(await R(this)).toString()}buffer(){return R(this)}}async function R(e){if(e[T].disturbed)throw new TypeError(`body used already for: ${e.url}`);if(e[T].disturbed=!0,e[T].error)throw e[T].error;let{body:t}=e;if(null===t)return Buffer.alloc(0);if(b(t)&&(t=t.stream()),Buffer.isBuffer(t))return t;if(!(t instanceof s))return Buffer.alloc(0);const r=[];let n=0;try{for await(const o of t){if(e.size>0&&n+o.length>e.size){const r=new p(`content size at ${e.url} over limit: ${e.size}`,"max-size");throw t.destroy(r),r}n+=o.length,r.push(o)}}catch(t){throw t instanceof d?t:new p(`Invalid response body while trying to fetch ${e.url}: ${t.message}`,"system",t)}if(!0!==t.readableEnded&&!0!==t._readableState.ended)throw new p(`Premature close of server response while trying to fetch ${e.url}`);try{return r.every((e=>"string"==typeof e))?Buffer.from(r.join("")):Buffer.concat(r,n)}catch(t){throw new p(`Could not create Buffer from response body for ${e.url}: ${t.message}`,"system",t)}}Object.defineProperties(j.prototype,{body:{enumerable:!0},bodyUsed:{enumerable:!0},arrayBuffer:{enumerable:!0},blob:{enumerable:!0},json:{enumerable:!0},text:{enumerable:!0}});const P=(e,t)=>{let r,n,{body:o}=e;if(e.bodyUsed)throw new Error("cannot clone body after it is used");return o instanceof s&&"function"!=typeof o.getBoundary&&(r=new s.PassThrough({highWaterMark:t}),n=new s.PassThrough({highWaterMark:t}),o.pipe(r),o.pipe(n),e[T].body=r,o=n),o},q=(e,t)=>null===e?null:"string"==typeof e?"text/plain;charset=UTF-8":y(e)?"application/x-www-form-urlencoded;charset=UTF-8":b(e)?e.type||null:Buffer.isBuffer(e)||u.types.isAnyArrayBuffer(e)||ArrayBuffer.isView(e)?null:e&&"function"==typeof e.getBoundary?`multipart/form-data;boundary=${e.getBoundary()}`:_(e)?`multipart/form-data; boundary=${t[T].boundary}`:e instanceof s?null:"text/plain;charset=UTF-8",E="function"==typeof n.validateHeaderName?n.validateHeaderName:e=>{if(!/^[\^`\-\w!#$%&'*+.|~]+$/.test(e)){const t=new TypeError(`Header name must be a valid HTTP token [${e}]`);throw Object.defineProperty(t,"code",{value:"ERR_INVALID_HTTP_TOKEN"}),t}},O="function"==typeof n.validateHeaderValue?n.validateHeaderValue:(e,t)=>{if(/[^\t\u0020-\u007E\u0080-\u00FF]/.test(t)){const t=new TypeError(`Invalid character in header content ["${e}"]`);throw Object.defineProperty(t,"code",{value:"ERR_INVALID_CHAR"}),t}};class A extends URLSearchParams{constructor(e){let t=[];if(e instanceof A){const r=e.raw();for(const[e,n]of Object.entries(r))t.push(...n.map((t=>[e,t])))}else if(null==e);else{if("object"!=typeof e||u.types.isBoxedPrimitive(e))throw new TypeError("Failed to construct 'Headers': The provided value is not of type '(sequence<sequence<ByteString>> or record<ByteString, ByteString>)");{const r=e[Symbol.iterator];if(null==r)t.push(...Object.entries(e));else{if("function"!=typeof r)throw new TypeError("Header pairs must be iterable");t=[...e].map((e=>{if("object"!=typeof e||u.types.isBoxedPrimitive(e))throw new TypeError("Each header pair must be an iterable object");return[...e]})).map((e=>{if(2!==e.length)throw new TypeError("Each header pair must be a name/value tuple");return[...e]}))}}}return t=t.length>0?t.map((([e,t])=>(E(e),O(e,String(t)),[String(e).toLowerCase(),String(t)]))):void 0,super(t),new Proxy(this,{get(e,t,r){switch(t){case"append":case"set":return(e,n)=>(E(e),O(e,String(n)),URLSearchParams.prototype[t].call(r,String(e).toLowerCase(),String(n)));case"delete":case"has":case"getAll":return e=>(E(e),URLSearchParams.prototype[t].call(r,String(e).toLowerCase()));case"keys":return()=>(e.sort(),new Set(URLSearchParams.prototype.keys.call(e)).keys());default:return Reflect.get(e,t,r)}}})}get[Symbol.toStringTag](){return this.constructor.name}toString(){return Object.prototype.toString.call(this)}get(e){const t=this.getAll(e);if(0===t.length)return null;let r=t.join(", ");return/^content-encoding$/i.test(e)&&(r=r.toLowerCase()),r}forEach(e){for(const t of this.keys())e(this.get(t),t)}*values(){for(const e of this.keys())yield this.get(e)}*entries(){for(const e of this.keys())yield[e,this.get(e)]}[Symbol.iterator](){return this.entries()}raw(){return[...this.keys()].reduce(((e,t)=>(e[t]=this.getAll(t),e)),{})}[Symbol.for("nodejs.util.inspect.custom")](){return[...this.keys()].reduce(((e,t)=>{const r=this.getAll(t);return e[t]="host"===t?r[0]:r.length>1?r:r[0],e}),{})}}Object.defineProperties(A.prototype,["get","entries","forEach","values"].reduce(((e,t)=>(e[t]={enumerable:!0},e)),{}));const k=new Set([301,302,303,307,308]),C=e=>k.has(e),x=Symbol("Response internals");class B extends j{constructor(e=null,t={}){super(e,t);const r=t.status||200,n=new A(t.headers);if(null!==e&&!n.has("Content-Type")){const t=q(e);t&&n.append("Content-Type",t)}this[x]={url:t.url,status:r,statusText:t.statusText||"",headers:n,counter:t.counter,highWaterMark:t.highWaterMark}}get url(){return this[x].url||""}get status(){return this[x].status}get ok(){return this[x].status>=200&&this[x].status<300}get redirected(){return this[x].counter>0}get statusText(){return this[x].statusText}get headers(){return this[x].headers}get highWaterMark(){return this[x].highWaterMark}clone(){return new B(P(this,this.highWaterMark),{url:this.url,status:this.status,statusText:this.statusText,headers:this.headers,ok:this.ok,redirected:this.redirected,size:this.size})}static redirect(e,t=302){if(!C(t))throw new RangeError('Failed to execute "redirect" on "response": Invalid status code');return new B(null,{headers:{location:new URL(e).toString()},status:t})}get[Symbol.toStringTag](){return"Response"}}Object.defineProperties(B.prototype,{url:{enumerable:!0},status:{enumerable:!0},ok:{enumerable:!0},redirected:{enumerable:!0},statusText:{enumerable:!0},headers:{enumerable:!0},clone:{enumerable:!0}});const W=Symbol("Request internals"),L=e=>"object"==typeof e&&"object"==typeof e[W];class $ extends j{constructor(e,t={}){let r;L(e)?r=new URL(e.url):(r=new URL(e),e={});let n=t.method||e.method||"GET";if(n=n.toUpperCase(),(null!=t.body||L(e))&&null!==e.body&&("GET"===n||"HEAD"===n))throw new TypeError("Request with GET/HEAD method cannot have body");const o=t.body?t.body:L(e)&&null!==e.body?P(e):null;super(o,{size:t.size||e.size||0});const i=new A(t.headers||e.headers||{});if(null!==o&&!i.has("Content-Type")){const e=q(o,this);e&&i.append("Content-Type",e)}let s=L(e)?e.signal:null;if("signal"in t&&(s=t.signal),null!==s&&("object"!=typeof(a=s)||"AbortSignal"!==a[h]))throw new TypeError("Expected signal to be an instanceof AbortSignal");var a;this[W]={method:n,redirect:t.redirect||e.redirect||"follow",headers:i,parsedURL:r,signal:s},this.follow=void 0===t.follow?void 0===e.follow?20:e.follow:t.follow,this.compress=void 0===t.compress?void 0===e.compress||e.compress:t.compress,this.counter=t.counter||e.counter||0,this.agent=t.agent||e.agent,this.highWaterMark=t.highWaterMark||e.highWaterMark||16384,this.insecureHTTPParser=t.insecureHTTPParser||e.insecureHTTPParser||!1}get method(){return this[W].method}get url(){return f.format(this[W].parsedURL)}get headers(){return this[W].headers}get redirect(){return this[W].redirect}get signal(){return this[W].signal}clone(){return new $(this)}get[Symbol.toStringTag](){return"Request"}}Object.defineProperties($.prototype,{method:{enumerable:!0},url:{enumerable:!0},headers:{enumerable:!0},redirect:{enumerable:!0},clone:{enumerable:!0},signal:{enumerable:!0}});class z extends d{constructor(e,t="aborted"){super(e,t)}}const M=new Set(["data:","http:","https:"]);async function I(e,t){return new Promise(((r,u)=>{const l=new $(e,t),c=(e=>{const{parsedURL:t}=e[W],r=new A(e[W].headers);r.has("Accept")||r.set("Accept","*/*");let n=null;if(null===e.body&&/^(post|put)$/i.test(e.method)&&(n="0"),null!==e.body){const t=(e=>{const{body:t}=e;return null===t?0:b(t)?t.size:Buffer.isBuffer(t)?t.length:t&&"function"==typeof t.getLengthSync?t.hasKnownLength&&t.hasKnownLength()?t.getLengthSync():null:_(t)?function(e,t){let r=0;for(const[n,o]of e)r+=Buffer.byteLength(S(t,n,o)),b(o)?r+=o.size:r+=Buffer.byteLength(String(o)),r+=v;return r+=Buffer.byteLength(w(t)),r}(e[T].boundary):null})(e);"number"!=typeof t||Number.isNaN(t)||(n=String(t))}n&&r.set("Content-Length",n),r.has("User-Agent")||r.set("User-Agent","node-fetch"),e.compress&&!r.has("Accept-Encoding")&&r.set("Accept-Encoding","gzip,deflate,br");let{agent:o}=e;"function"==typeof o&&(o=o(t)),r.has("Connection")||o||r.set("Connection","close");const i=(e=>{if(e.search)return e.search;const t=e.href.length-1,r=e.hash||("#"===e.href[t]?"#":"");return"?"===e.href[t-r.length]?"?":""})(t);return{path:t.pathname+i,pathname:t.pathname,hostname:t.hostname,protocol:t.protocol,port:t.port,hash:t.hash,search:t.search,query:t.query,href:t.href,method:e.method,headers:r[Symbol.for("nodejs.util.inspect.custom")](),insecureHTTPParser:e.insecureHTTPParser,agent:o}})(l);if(!M.has(c.protocol))throw new TypeError(`node-fetch cannot load ${e}. URL scheme "${c.protocol.replace(/:$/,"")}" is not supported.`);if("data:"===c.protocol){const e=a(l.url),t=new B(e,{headers:{"Content-Type":e.typeFull}});return void r(t)}const f=("https:"===c.protocol?o:n).request,{signal:d}=l;let h=null;const y=()=>{const e=new z("The operation was aborted.");u(e),l.body&&l.body instanceof s.Readable&&l.body.destroy(e),h&&h.body&&h.body.emit("error",e)};if(d&&d.aborted)return void y();const g=()=>{y(),j()},m=f(c);d&&d.addEventListener("abort",g);const j=()=>{m.abort(),d&&d.removeEventListener("abort",g)};m.on("error",(e=>{u(new p(`request to ${l.url} failed, reason: ${e.message}`,"system",e)),j()})),m.on("response",(e=>{m.setTimeout(0);const n=function(e=[]){return new A(e.reduce(((e,t,r,n)=>(r%2==0&&e.push(n.slice(r,r+2)),e)),[]).filter((([e,t])=>{try{return E(e),O(e,String(t)),!0}catch{return!1}})))}(e.rawHeaders);if(C(e.statusCode)){const o=n.get("Location"),i=null===o?null:new URL(o,l.url);switch(l.redirect){case"error":return u(new p(`uri requested responds with a redirect, redirect mode is set to error: ${l.url}`,"no-redirect")),void j();case"manual":if(null!==i)try{n.set("Location",i)}catch(e){u(e)}break;case"follow":{if(null===i)break;if(l.counter>=l.follow)return u(new p(`maximum redirect reached at: ${l.url}`,"max-redirect")),void j();const n={headers:new A(l.headers),follow:l.follow,counter:l.counter+1,agent:l.agent,compress:l.compress,method:l.method,body:l.body,signal:l.signal,size:l.size};return 303!==e.statusCode&&l.body&&t.body instanceof s.Readable?(u(new p("Cannot follow redirect with body being a readable stream","unsupported-redirect")),void j()):(303!==e.statusCode&&(301!==e.statusCode&&302!==e.statusCode||"POST"!==l.method)||(n.method="GET",n.body=void 0,n.headers.delete("content-length")),r(I(new $(i,n))),void j())}}}e.once("end",(()=>{d&&d.removeEventListener("abort",g)}));let o=s.pipeline(e,new s.PassThrough,(e=>{u(e)}));process.version<"v12.10"&&e.on("aborted",g);const a={url:l.url,status:e.statusCode,statusText:e.statusMessage,headers:n,size:l.size,counter:l.counter,highWaterMark:l.highWaterMark},c=n.get("Content-Encoding");if(!l.compress||"HEAD"===l.method||null===c||204===e.statusCode||304===e.statusCode)return h=new B(o,a),void r(h);const f={flush:i.Z_SYNC_FLUSH,finishFlush:i.Z_SYNC_FLUSH};if("gzip"===c||"x-gzip"===c)return o=s.pipeline(o,i.createGunzip(f),(e=>{u(e)})),h=new B(o,a),void r(h);if("deflate"!==c&&"x-deflate"!==c){if("br"===c)return o=s.pipeline(o,i.createBrotliDecompress(),(e=>{u(e)})),h=new B(o,a),void r(h);h=new B(o,a),r(h)}else s.pipeline(e,new s.PassThrough,(e=>{u(e)})).once("data",(e=>{o=8==(15&e[0])?s.pipeline(o,i.createInflate(),(e=>{u(e)})):s.pipeline(o,i.createInflateRaw(),(e=>{u(e)})),h=new B(o,a),r(h)}))})),((e,{body:t})=>{null===t?e.end():b(t)?t.stream().pipe(e):Buffer.isBuffer(t)?(e.write(t),e.end()):t.pipe(e)})(m,l)}))}t.AbortError=z,t.FetchError=p,t.Headers=A,t.Request=$,t.Response=B,t.default=I,t.isRedirect=C},78:e=>{function t(e){return e.replace(/[\/]+/g,"/").replace(/\/\?/g,"?").replace(/\/\#/g,"#").replace(/\:\//g,"://")}e.exports=function(){var e=[].slice.call(arguments,0).join("/");return t(e)}},377:(e,t,r)=>{"use strict";r.r(t),r.d(t,{ByteLengthQueuingStrategy:()=>pr,CountQueuingStrategy:()=>_r,ReadableByteStreamController:()=>ye,ReadableStream:()=>rr,ReadableStreamBYOBReader:()=>$e,ReadableStreamBYOBRequest:()=>he,ReadableStreamDefaultController:()=>zt,ReadableStreamDefaultReader:()=>X,TransformStream:()=>Tr,TransformStreamDefaultController:()=>Er,WritableStream:()=>Ge,WritableStreamDefaultController:()=>yt,WritableStreamDefaultWriter:()=>ut});const n="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?Symbol:e=>`Symbol(${e})`;function o(){}const i="undefined"!=typeof self?self:"undefined"!=typeof window?window:"undefined"!=typeof global?global:void 0;function s(e){return"object"==typeof e&&null!==e||"function"==typeof e}const a=o,u=Promise,l=Promise.prototype.then,c=Promise.resolve.bind(u),f=Promise.reject.bind(u);function d(e){return new u(e)}function p(e){return c(e)}function h(e){return f(e)}function y(e,t,r){return l.call(e,t,r)}function b(e,t,r){y(y(e,t,r),void 0,a)}function _(e,t){b(e,t)}function g(e,t){b(e,void 0,t)}function m(e,t,r){return y(e,t,r)}function v(e){y(e,void 0,a)}const w=(()=>{const e=i&&i.queueMicrotask;if("function"==typeof e)return e;const t=p(void 0);return e=>y(t,e)})();function S(e,t,r){if("function"!=typeof e)throw new TypeError("Argument is not a function");return Function.prototype.apply.call(e,t,r)}function T(e,t,r){try{return p(S(e,t,r))}catch(e){return h(e)}}class j{constructor(){this._cursor=0,this._size=0,this._front={_elements:[],_next:void 0},this._back=this._front,this._cursor=0,this._size=0}get length(){return this._size}push(e){const t=this._back;let r=t;16383===t._elements.length&&(r={_elements:[],_next:void 0}),t._elements.push(e),r!==t&&(this._back=r,t._next=r),++this._size}shift(){const e=this._front;let t=e;const r=this._cursor;let n=r+1;const o=e._elements,i=o[r];return 16384===n&&(t=e._next,n=0),--this._size,this._cursor=n,e!==t&&(this._front=t),o[r]=void 0,i}forEach(e){let t=this._cursor,r=this._front,n=r._elements;for(;!(t===n.length&&void 0===r._next||t===n.length&&(r=r._next,n=r._elements,t=0,0===n.length));)e(n[t]),++t}peek(){const e=this._front,t=this._cursor;return e._elements[t]}}function R(e,t){e._ownerReadableStream=t,t._reader=e,"readable"===t._state?O(e):"closed"===t._state?function(e){O(e),C(e)}(e):A(e,t._storedError)}function P(e,t){return ar(e._ownerReadableStream,t)}function q(e){"readable"===e._ownerReadableStream._state?k(e,new TypeError("Reader was released and can no longer be used to monitor the stream's closedness")):function(e,t){A(e,new TypeError("Reader was released and can no longer be used to monitor the stream's closedness"))}(e),e._ownerReadableStream._reader=void 0,e._ownerReadableStream=void 0}function E(e){return new TypeError("Cannot "+e+" a stream using a released reader")}function O(e){e._closedPromise=d(((t,r)=>{e._closedPromise_resolve=t,e._closedPromise_reject=r}))}function A(e,t){O(e),k(e,t)}function k(e,t){void 0!==e._closedPromise_reject&&(v(e._closedPromise),e._closedPromise_reject(t),e._closedPromise_resolve=void 0,e._closedPromise_reject=void 0)}function C(e){void 0!==e._closedPromise_resolve&&(e._closedPromise_resolve(void 0),e._closedPromise_resolve=void 0,e._closedPromise_reject=void 0)}const x=n("[[AbortSteps]]"),B=n("[[ErrorSteps]]"),W=n("[[CancelSteps]]"),L=n("[[PullSteps]]"),$=Number.isFinite||function(e){return"number"==typeof e&&isFinite(e)},z=Math.trunc||function(e){return e<0?Math.ceil(e):Math.floor(e)};function M(e,t){if(void 0!==e&&"object"!=typeof(r=e)&&"function"!=typeof r)throw new TypeError(`${t} is not an object.`);var r}function I(e,t){if("function"!=typeof e)throw new TypeError(`${t} is not a function.`)}function F(e,t){if(!function(e){return"object"==typeof e&&null!==e||"function"==typeof e}(e))throw new TypeError(`${t} is not an object.`)}function D(e,t,r){if(void 0===e)throw new TypeError(`Parameter ${t} is required in '${r}'.`)}function U(e,t,r){if(void 0===e)throw new TypeError(`${t} is required in '${r}'.`)}function H(e){return Number(e)}function N(e){return 0===e?0:e}function V(e,t){const r=Number.MAX_SAFE_INTEGER;let n=Number(e);if(n=N(n),!$(n))throw new TypeError(`${t} is not a finite number`);if(n=function(e){return N(z(e))}(n),n<0||n>r)throw new TypeError(`${t} is outside the accepted range of 0 to ${r}, inclusive`);return $(n)&&0!==n?n:0}function Q(e,t){if(!ir(e))throw new TypeError(`${t} is not a ReadableStream.`)}function Y(e){return new X(e)}function G(e,t){e._reader._readRequests.push(t)}function J(e,t,r){const n=e._reader._readRequests.shift();r?n._closeSteps():n._chunkSteps(t)}function K(e){return e._reader._readRequests.length}function Z(e){const t=e._reader;return void 0!==t&&!!ee(t)}class X{constructor(e){if(D(e,1,"ReadableStreamDefaultReader"),Q(e,"First parameter"),sr(e))throw new TypeError("This stream has already been locked for exclusive reading by another reader");R(this,e),this._readRequests=new j}get closed(){return ee(this)?this._closedPromise:h(re("closed"))}cancel(e){return ee(this)?void 0===this._ownerReadableStream?h(E("cancel")):P(this,e):h(re("cancel"))}read(){if(!ee(this))return h(re("read"));if(void 0===this._ownerReadableStream)return h(E("read from"));let e,t;const r=d(((r,n)=>{e=r,t=n}));return te(this,{_chunkSteps:t=>e({value:t,done:!1}),_closeSteps:()=>e({value:void 0,done:!0}),_errorSteps:e=>t(e)}),r}releaseLock(){if(!ee(this))throw re("releaseLock");if(void 0!==this._ownerReadableStream){if(this._readRequests.length>0)throw new TypeError("Tried to release a reader lock when that reader has pending read() calls un-settled");q(this)}}}function ee(e){return!!s(e)&&!!Object.prototype.hasOwnProperty.call(e,"_readRequests")}function te(e,t){const r=e._ownerReadableStream;r._disturbed=!0,"closed"===r._state?t._closeSteps():"errored"===r._state?t._errorSteps(r._storedError):r._readableStreamController[L](t)}function re(e){return new TypeError(`ReadableStreamDefaultReader.prototype.${e} can only be used on a ReadableStreamDefaultReader`)}Object.defineProperties(X.prototype,{cancel:{enumerable:!0},read:{enumerable:!0},releaseLock:{enumerable:!0},closed:{enumerable:!0}}),"symbol"==typeof n.toStringTag&&Object.defineProperty(X.prototype,n.toStringTag,{value:"ReadableStreamDefaultReader",configurable:!0});const ne=Object.getPrototypeOf(Object.getPrototypeOf((async function*(){})).prototype);class oe{constructor(e,t){this._ongoingPromise=void 0,this._isFinished=!1,this._reader=e,this._preventCancel=t}next(){const e=()=>this._nextSteps();return this._ongoingPromise=this._ongoingPromise?m(this._ongoingPromise,e,e):e(),this._ongoingPromise}return(e){const t=()=>this._returnSteps(e);return this._ongoingPromise?m(this._ongoingPromise,t,t):t()}_nextSteps(){if(this._isFinished)return Promise.resolve({value:void 0,done:!0});const e=this._reader;if(void 0===e._ownerReadableStream)return h(E("iterate"));let t,r;const n=d(((e,n)=>{t=e,r=n}));return te(e,{_chunkSteps:e=>{this._ongoingPromise=void 0,w((()=>t({value:e,done:!1})))},_closeSteps:()=>{this._ongoingPromise=void 0,this._isFinished=!0,q(e),t({value:void 0,done:!0})},_errorSteps:t=>{this._ongoingPromise=void 0,this._isFinished=!0,q(e),r(t)}}),n}_returnSteps(e){if(this._isFinished)return Promise.resolve({value:e,done:!0});this._isFinished=!0;const t=this._reader;if(void 0===t._ownerReadableStream)return h(E("finish iterating"));if(!this._preventCancel){const r=P(t,e);return q(t),m(r,(()=>({value:e,done:!0})))}return q(t),p({value:e,done:!0})}}const ie={next(){return se(this)?this._asyncIteratorImpl.next():h(ae("next"))},return(e){return se(this)?this._asyncIteratorImpl.return(e):h(ae("return"))}};function se(e){return!!s(e)&&!!Object.prototype.hasOwnProperty.call(e,"_asyncIteratorImpl")}function ae(e){return new TypeError(`ReadableStreamAsyncIterator.${e} can only be used on a ReadableSteamAsyncIterator`)}void 0!==ne&&Object.setPrototypeOf(ie,ne);const ue=Number.isNaN||function(e){return e!=e};function le(e){return!!function(e){return"number"==typeof e&&(!ue(e)&&!(e<0))}(e)&&e!==1/0}function ce(e){const t=e._queue.shift();return e._queueTotalSize-=t.size,e._queueTotalSize<0&&(e._queueTotalSize=0),t.value}function fe(e,t,r){if(!le(r=Number(r)))throw new RangeError("Size must be a finite, non-NaN, non-negative number.");e._queue.push({value:t,size:r}),e._queueTotalSize+=r}function de(e){e._queue=new j,e._queueTotalSize=0}function pe(e){return e.slice()}class he{constructor(){throw new TypeError("Illegal constructor")}get view(){if(!_e(this))throw Ce("view");return this._view}respond(e){if(!_e(this))throw Ce("respond");if(D(e,1,"respond"),e=V(e,"First parameter"),void 0===this._associatedReadableByteStreamController)throw new TypeError("This BYOB request has been invalidated");this._view.buffer,function(e,t){if(!le(t=Number(t)))throw new RangeError("bytesWritten must be a finite");qe(e,t)}(this._associatedReadableByteStreamController,e)}respondWithNewView(e){if(!_e(this))throw Ce("respondWithNewView");if(D(e,1,"respondWithNewView"),!ArrayBuffer.isView(e))throw new TypeError("You can only respond with array buffer views");if(0===e.byteLength)throw new TypeError("chunk must have non-zero byteLength");if(0===e.buffer.byteLength)throw new TypeError("chunk's buffer must have non-zero byteLength");if(void 0===this._associatedReadableByteStreamController)throw new TypeError("This BYOB request has been invalidated");!function(e,t){const r=e._pendingPullIntos.peek();if(r.byteOffset+r.bytesFilled!==t.byteOffset)throw new RangeError("The region specified by view does not match byobRequest");if(r.byteLength!==t.byteLength)throw new RangeError("The buffer of view has different capacity than byobRequest");r.buffer=t.buffer,qe(e,t.byteLength)}(this._associatedReadableByteStreamController,e)}}Object.defineProperties(he.prototype,{respond:{enumerable:!0},respondWithNewView:{enumerable:!0},view:{enumerable:!0}}),"symbol"==typeof n.toStringTag&&Object.defineProperty(he.prototype,n.toStringTag,{value:"ReadableStreamBYOBRequest",configurable:!0});class ye{constructor(){throw new TypeError("Illegal constructor")}get byobRequest(){if(!be(this))throw xe("byobRequest");if(null===this._byobRequest&&this._pendingPullIntos.length>0){const e=this._pendingPullIntos.peek(),t=new Uint8Array(e.buffer,e.byteOffset+e.bytesFilled,e.byteLength-e.bytesFilled),r=Object.create(he.prototype);!function(e,t,r){e._associatedReadableByteStreamController=t,e._view=r}(r,this,t),this._byobRequest=r}return this._byobRequest}get desiredSize(){if(!be(this))throw xe("desiredSize");return ke(this)}close(){if(!be(this))throw xe("close");if(this._closeRequested)throw new TypeError("The stream has already been closed; do not close it again!");const e=this._controlledReadableByteStream._state;if("readable"!==e)throw new TypeError(`The stream (in ${e} state) is not in the readable state and cannot be closed`);!function(e){const t=e._controlledReadableByteStream;if(!e._closeRequested&&"readable"===t._state)if(e._queueTotalSize>0)e._closeRequested=!0;else{if(e._pendingPullIntos.length>0&&e._pendingPullIntos.peek().bytesFilled>0){const t=new TypeError("Insufficient bytes to fill elements in the given buffer");throw Ae(e,t),t}Oe(e),ur(t)}}(this)}enqueue(e){if(!be(this))throw xe("enqueue");if(D(e,1,"enqueue"),!ArrayBuffer.isView(e))throw new TypeError("chunk must be an array buffer view");if(0===e.byteLength)throw new TypeError("chunk must have non-zero byteLength");if(0===e.buffer.byteLength)throw new TypeError("chunk's buffer must have non-zero byteLength");if(this._closeRequested)throw new TypeError("stream is closed or draining");const t=this._controlledReadableByteStream._state;if("readable"!==t)throw new TypeError(`The stream (in ${t} state) is not in the readable state and cannot be enqueued to`);!function(e,t){const r=e._controlledReadableByteStream;if(e._closeRequested||"readable"!==r._state)return;const n=t.buffer,o=t.byteOffset,i=t.byteLength,s=n;Z(r)?0===K(r)?we(e,s,o,i):J(r,new Uint8Array(s,o,i),!1):Le(r)?(we(e,s,o,i),Pe(e)):we(e,s,o,i),ge(e)}(this,e)}error(e){if(!be(this))throw xe("error");Ae(this,e)}[W](e){this._pendingPullIntos.length>0&&(this._pendingPullIntos.peek().bytesFilled=0),de(this);const t=this._cancelAlgorithm(e);return Oe(this),t}[L](e){const t=this._controlledReadableByteStream;if(this._queueTotalSize>0){const t=this._queue.shift();this._queueTotalSize-=t.byteLength,je(this);const r=new Uint8Array(t.buffer,t.byteOffset,t.byteLength);return void e._chunkSteps(r)}const r=this._autoAllocateChunkSize;if(void 0!==r){let t;try{t=new ArrayBuffer(r)}catch(t){return void e._errorSteps(t)}const n={buffer:t,byteOffset:0,byteLength:r,bytesFilled:0,elementSize:1,viewConstructor:Uint8Array,readerType:"default"};this._pendingPullIntos.push(n)}G(t,e),ge(this)}}function be(e){return!!s(e)&&!!Object.prototype.hasOwnProperty.call(e,"_controlledReadableByteStream")}function _e(e){return!!s(e)&&!!Object.prototype.hasOwnProperty.call(e,"_associatedReadableByteStreamController")}function ge(e){(function(e){const t=e._controlledReadableByteStream;return"readable"===t._state&&(!e._closeRequested&&(!!e._started&&(!!(Z(t)&&K(t)>0)||(!!(Le(t)&&We(t)>0)||ke(e)>0))))})(e)&&(e._pulling?e._pullAgain=!0:(e._pulling=!0,b(e._pullAlgorithm(),(()=>{e._pulling=!1,e._pullAgain&&(e._pullAgain=!1,ge(e))}),(t=>{Ae(e,t)}))))}function me(e,t){let r=!1;"closed"===e._state&&(r=!0);const n=ve(t);"default"===t.readerType?J(e,n,r):function(e,t,r){const n=e._reader._readIntoRequests.shift();r?n._closeSteps(t):n._chunkSteps(t)}(e,n,r)}function ve(e){const t=e.bytesFilled,r=e.elementSize;return new e.viewConstructor(e.buffer,e.byteOffset,t/r)}function we(e,t,r,n){e._queue.push({buffer:t,byteOffset:r,byteLength:n}),e._queueTotalSize+=n}function Se(e,t){const r=t.elementSize,n=t.bytesFilled-t.bytesFilled%r,o=Math.min(e._queueTotalSize,t.byteLength-t.bytesFilled),i=t.bytesFilled+o,s=i-i%r;let a=o,u=!1;s>n&&(a=s-t.bytesFilled,u=!0);const l=e._queue;for(;a>0;){const r=l.peek(),n=Math.min(a,r.byteLength),o=t.byteOffset+t.bytesFilled;c=t.buffer,f=o,d=r.buffer,p=r.byteOffset,h=n,new Uint8Array(c).set(new Uint8Array(d,p,h),f),r.byteLength===n?l.shift():(r.byteOffset+=n,r.byteLength-=n),e._queueTotalSize-=n,Te(e,n,t),a-=n}var c,f,d,p,h;return u}function Te(e,t,r){Re(e),r.bytesFilled+=t}function je(e){0===e._queueTotalSize&&e._closeRequested?(Oe(e),ur(e._controlledReadableByteStream)):ge(e)}function Re(e){null!==e._byobRequest&&(e._byobRequest._associatedReadableByteStreamController=void 0,e._byobRequest._view=null,e._byobRequest=null)}function Pe(e){for(;e._pendingPullIntos.length>0;){if(0===e._queueTotalSize)return;const t=e._pendingPullIntos.peek();Se(e,t)&&(Ee(e),me(e._controlledReadableByteStream,t))}}function qe(e,t){const r=e._pendingPullIntos.peek();if("closed"===e._controlledReadableByteStream._state){if(0!==t)throw new TypeError("bytesWritten must be 0 when calling respond() on a closed stream");!function(e,t){t.buffer=t.buffer;const r=e._controlledReadableByteStream;if(Le(r))for(;We(r)>0;)me(r,Ee(e))}(e,r)}else!function(e,t,r){if(r.bytesFilled+t>r.byteLength)throw new RangeError("bytesWritten out of range");if(Te(e,t,r),r.bytesFilled<r.elementSize)return;Ee(e);const n=r.bytesFilled%r.elementSize;if(n>0){const t=r.byteOffset+r.bytesFilled,o=r.buffer.slice(t-n,t);we(e,o,0,o.byteLength)}r.buffer=r.buffer,r.bytesFilled-=n,me(e._controlledReadableByteStream,r),Pe(e)}(e,t,r);ge(e)}function Ee(e){const t=e._pendingPullIntos.shift();return Re(e),t}function Oe(e){e._pullAlgorithm=void 0,e._cancelAlgorithm=void 0}function Ae(e,t){const r=e._controlledReadableByteStream;"readable"===r._state&&(function(e){Re(e),e._pendingPullIntos=new j}(e),de(e),Oe(e),lr(r,t))}function ke(e){const t=e._controlledReadableByteStream._state;return"errored"===t?null:"closed"===t?0:e._strategyHWM-e._queueTotalSize}function Ce(e){return new TypeError(`ReadableStreamBYOBRequest.prototype.${e} can only be used on a ReadableStreamBYOBRequest`)}function xe(e){return new TypeError(`ReadableByteStreamController.prototype.${e} can only be used on a ReadableByteStreamController`)}function Be(e,t){e._reader._readIntoRequests.push(t)}function We(e){return e._reader._readIntoRequests.length}function Le(e){const t=e._reader;return void 0!==t&&!!ze(t)}Object.defineProperties(ye.prototype,{close:{enumerable:!0},enqueue:{enumerable:!0},error:{enumerable:!0},byobRequest:{enumerable:!0},desiredSize:{enumerable:!0}}),"symbol"==typeof n.toStringTag&&Object.defineProperty(ye.prototype,n.toStringTag,{value:"ReadableByteStreamController",configurable:!0});class $e{constructor(e){if(D(e,1,"ReadableStreamBYOBReader"),Q(e,"First parameter"),sr(e))throw new TypeError("This stream has already been locked for exclusive reading by another reader");if(!be(e._readableStreamController))throw new TypeError("Cannot construct a ReadableStreamBYOBReader for a stream not constructed with a byte source");R(this,e),this._readIntoRequests=new j}get closed(){return ze(this)?this._closedPromise:h(Me("closed"))}cancel(e){return ze(this)?void 0===this._ownerReadableStream?h(E("cancel")):P(this,e):h(Me("cancel"))}read(e){if(!ze(this))return h(Me("read"));if(!ArrayBuffer.isView(e))return h(new TypeError("view must be an array buffer view"));if(0===e.byteLength)return h(new TypeError("view must have non-zero byteLength"));if(0===e.buffer.byteLength)return h(new TypeError("view's buffer must have non-zero byteLength"));if(void 0===this._ownerReadableStream)return h(E("read from"));let t,r;const n=d(((e,n)=>{t=e,r=n}));return function(e,t,r){const n=e._ownerReadableStream;n._disturbed=!0,"errored"===n._state?r._errorSteps(n._storedError):function(e,t,r){const n=e._controlledReadableByteStream;let o=1;t.constructor!==DataView&&(o=t.constructor.BYTES_PER_ELEMENT);const i=t.constructor,s={buffer:t.buffer,byteOffset:t.byteOffset,byteLength:t.byteLength,bytesFilled:0,elementSize:o,viewConstructor:i,readerType:"byob"};if(e._pendingPullIntos.length>0)return e._pendingPullIntos.push(s),void Be(n,r);if("closed"!==n._state){if(e._queueTotalSize>0){if(Se(e,s)){const t=ve(s);return je(e),void r._chunkSteps(t)}if(e._closeRequested){const t=new TypeError("Insufficient bytes to fill elements in the given buffer");return Ae(e,t),void r._errorSteps(t)}}e._pendingPullIntos.push(s),Be(n,r),ge(e)}else{const e=new i(s.buffer,s.byteOffset,0);r._closeSteps(e)}}(n._readableStreamController,t,r)}(this,e,{_chunkSteps:e=>t({value:e,done:!1}),_closeSteps:e=>t({value:e,done:!0}),_errorSteps:e=>r(e)}),n}releaseLock(){if(!ze(this))throw Me("releaseLock");if(void 0!==this._ownerReadableStream){if(this._readIntoRequests.length>0)throw new TypeError("Tried to release a reader lock when that reader has pending read() calls un-settled");q(this)}}}function ze(e){return!!s(e)&&!!Object.prototype.hasOwnProperty.call(e,"_readIntoRequests")}function Me(e){return new TypeError(`ReadableStreamBYOBReader.prototype.${e} can only be used on a ReadableStreamBYOBReader`)}function Ie(e,t){const{highWaterMark:r}=e;if(void 0===r)return t;if(ue(r)||r<0)throw new RangeError("Invalid highWaterMark");return r}function Fe(e){const{size:t}=e;return t||(()=>1)}function De(e,t){M(e,t);const r=null==e?void 0:e.highWaterMark,n=null==e?void 0:e.size;return{highWaterMark:void 0===r?void 0:H(r),size:void 0===n?void 0:Ue(n,`${t} has member 'size' that`)}}function Ue(e,t){return I(e,t),t=>H(e(t))}function He(e,t,r){return I(e,r),r=>T(e,t,[r])}function Ne(e,t,r){return I(e,r),()=>T(e,t,[])}function Ve(e,t,r){return I(e,r),r=>S(e,t,[r])}function Qe(e,t,r){return I(e,r),(r,n)=>T(e,t,[r,n])}function Ye(e,t){if(!Ze(e))throw new TypeError(`${t} is not a WritableStream.`)}Object.defineProperties($e.prototype,{cancel:{enumerable:!0},read:{enumerable:!0},releaseLock:{enumerable:!0},closed:{enumerable:!0}}),"symbol"==typeof n.toStringTag&&Object.defineProperty($e.prototype,n.toStringTag,{value:"ReadableStreamBYOBReader",configurable:!0});class Ge{constructor(e={},t={}){void 0===e?e=null:F(e,"First parameter");const r=De(t,"Second parameter"),n=function(e,t){M(e,t);const r=null==e?void 0:e.abort,n=null==e?void 0:e.close,o=null==e?void 0:e.start,i=null==e?void 0:e.type,s=null==e?void 0:e.write;return{abort:void 0===r?void 0:He(r,e,`${t} has member 'abort' that`),close:void 0===n?void 0:Ne(n,e,`${t} has member 'close' that`),start:void 0===o?void 0:Ve(o,e,`${t} has member 'start' that`),write:void 0===s?void 0:Qe(s,e,`${t} has member 'write' that`),type:i}}(e,"First parameter");if(Ke(this),void 0!==n.type)throw new RangeError("Invalid type is specified");const o=Fe(r);!function(e,t,r,n){const o=Object.create(yt.prototype);let i=()=>{},s=()=>p(void 0),a=()=>p(void 0),u=()=>p(void 0);void 0!==t.start&&(i=()=>t.start(o)),void 0!==t.write&&(s=e=>t.write(e,o)),void 0!==t.close&&(a=()=>t.close()),void 0!==t.abort&&(u=e=>t.abort(e)),bt(e,o,i,s,a,u,r,n)}(this,n,Ie(r,1),o)}get locked(){if(!Ze(this))throw Tt("locked");return Xe(this)}abort(e){return Ze(this)?Xe(this)?h(new TypeError("Cannot abort a stream that already has a writer")):et(this,e):h(Tt("abort"))}close(){return Ze(this)?Xe(this)?h(new TypeError("Cannot close a stream that already has a writer")):it(this)?h(new TypeError("Cannot close an already-closing stream")):tt(this):h(Tt("close"))}getWriter(){if(!Ze(this))throw Tt("getWriter");return Je(this)}}function Je(e){return new ut(e)}function Ke(e){e._state="writable",e._storedError=void 0,e._writer=void 0,e._writableStreamController=void 0,e._writeRequests=new j,e._inFlightWriteRequest=void 0,e._closeRequest=void 0,e._inFlightCloseRequest=void 0,e._pendingAbortRequest=void 0,e._backpressure=!1}function Ze(e){return!!s(e)&&!!Object.prototype.hasOwnProperty.call(e,"_writableStreamController")}function Xe(e){return void 0!==e._writer}function et(e,t){const r=e._state;if("closed"===r||"errored"===r)return p(void 0);if(void 0!==e._pendingAbortRequest)return e._pendingAbortRequest._promise;let n=!1;"erroring"===r&&(n=!0,t=void 0);const o=d(((r,o)=>{e._pendingAbortRequest={_promise:void 0,_resolve:r,_reject:o,_reason:t,_wasAlreadyErroring:n}}));return e._pendingAbortRequest._promise=o,n||nt(e,t),o}function tt(e){const t=e._state;if("closed"===t||"errored"===t)return h(new TypeError(`The stream (in ${t} state) is not in the writable state and cannot be closed`));const r=d(((t,r)=>{const n={_resolve:t,_reject:r};e._closeRequest=n})),n=e._writer;var o;return void 0!==n&&e._backpressure&&"writable"===t&&Bt(n),fe(o=e._writableStreamController,ht,0),mt(o),r}function rt(e,t){"writable"!==e._state?ot(e):nt(e,t)}function nt(e,t){const r=e._writableStreamController;e._state="erroring",e._storedError=t;const n=e._writer;void 0!==n&&ft(n,t),!function(e){return void 0!==e._inFlightWriteRequest||void 0!==e._inFlightCloseRequest}(e)&&r._started&&ot(e)}function ot(e){e._state="errored",e._writableStreamController[B]();const t=e._storedError;if(e._writeRequests.forEach((e=>{e._reject(t)})),e._writeRequests=new j,void 0===e._pendingAbortRequest)return void st(e);const r=e._pendingAbortRequest;if(e._pendingAbortRequest=void 0,r._wasAlreadyErroring)return r._reject(t),void st(e);b(e._writableStreamController[x](r._reason),(()=>{r._resolve(),st(e)}),(t=>{r._reject(t),st(e)}))}function it(e){return void 0!==e._closeRequest||void 0!==e._inFlightCloseRequest}function st(e){void 0!==e._closeRequest&&(e._closeRequest._reject(e._storedError),e._closeRequest=void 0);const t=e._writer;void 0!==t&&Et(t,e._storedError)}function at(e,t){const r=e._writer;void 0!==r&&t!==e._backpressure&&(t?function(e){At(e)}(r):Bt(r)),e._backpressure=t}Object.defineProperties(Ge.prototype,{abort:{enumerable:!0},close:{enumerable:!0},getWriter:{enumerable:!0},locked:{enumerable:!0}}),"symbol"==typeof n.toStringTag&&Object.defineProperty(Ge.prototype,n.toStringTag,{value:"WritableStream",configurable:!0});class ut{constructor(e){if(D(e,1,"WritableStreamDefaultWriter"),Ye(e,"First parameter"),Xe(e))throw new TypeError("This stream has already been locked for exclusive writing by another writer");this._ownerWritableStream=e,e._writer=this;const t=e._state;if("writable"===t)!it(e)&&e._backpressure?At(this):Ct(this),Pt(this);else if("erroring"===t)kt(this,e._storedError),Pt(this);else if("closed"===t)Ct(this),Pt(this),Ot(this);else{const t=e._storedError;kt(this,t),qt(this,t)}}get closed(){return lt(this)?this._closedPromise:h(jt("closed"))}get desiredSize(){if(!lt(this))throw jt("desiredSize");if(void 0===this._ownerWritableStream)throw Rt("desiredSize");return function(e){const t=e._ownerWritableStream,r=t._state;return"errored"===r||"erroring"===r?null:"closed"===r?0:gt(t._writableStreamController)}(this)}get ready(){return lt(this)?this._readyPromise:h(jt("ready"))}abort(e){return lt(this)?void 0===this._ownerWritableStream?h(Rt("abort")):function(e,t){return et(e._ownerWritableStream,t)}(this,e):h(jt("abort"))}close(){if(!lt(this))return h(jt("close"));const e=this._ownerWritableStream;return void 0===e?h(Rt("close")):it(e)?h(new TypeError("Cannot close an already-closing stream")):ct(this)}releaseLock(){if(!lt(this))throw jt("releaseLock");void 0!==this._ownerWritableStream&&dt(this)}write(e){return lt(this)?void 0===this._ownerWritableStream?h(Rt("write to")):pt(this,e):h(jt("write"))}}function lt(e){return!!s(e)&&!!Object.prototype.hasOwnProperty.call(e,"_ownerWritableStream")}function ct(e){return tt(e._ownerWritableStream)}function ft(e,t){"pending"===e._readyPromiseState?xt(e,t):function(e,t){kt(e,t)}(e,t)}function dt(e){const t=e._ownerWritableStream,r=new TypeError("Writer was released and can no longer be used to monitor the stream's closedness");ft(e,r),function(e,t){"pending"===e._closedPromiseState?Et(e,t):function(e,t){qt(e,t)}(e,t)}(e,r),t._writer=void 0,e._ownerWritableStream=void 0}function pt(e,t){const r=e._ownerWritableStream,n=r._writableStreamController,o=function(e,t){try{return e._strategySizeAlgorithm(t)}catch(t){return vt(e,t),1}}(n,t);if(r!==e._ownerWritableStream)return h(Rt("write to"));const i=r._state;if("errored"===i)return h(r._storedError);if(it(r)||"closed"===i)return h(new TypeError("The stream is closing or closed and cannot be written to"));if("erroring"===i)return h(r._storedError);const s=function(e){return d(((t,r)=>{const n={_resolve:t,_reject:r};e._writeRequests.push(n)}))}(r);return function(e,t,r){try{fe(e,t,r)}catch(t){return void vt(e,t)}const n=e._controlledWritableStream;it(n)||"writable"!==n._state||at(n,wt(e)),mt(e)}(n,t,o),s}Object.defineProperties(ut.prototype,{abort:{enumerable:!0},close:{enumerable:!0},releaseLock:{enumerable:!0},write:{enumerable:!0},closed:{enumerable:!0},desiredSize:{enumerable:!0},ready:{enumerable:!0}}),"symbol"==typeof n.toStringTag&&Object.defineProperty(ut.prototype,n.toStringTag,{value:"WritableStreamDefaultWriter",configurable:!0});const ht={};class yt{constructor(){throw new TypeError("Illegal constructor")}error(e){if(!s(t=this)||!Object.prototype.hasOwnProperty.call(t,"_controlledWritableStream"))throw new TypeError("WritableStreamDefaultController.prototype.error can only be used on a WritableStreamDefaultController");var t;"writable"===this._controlledWritableStream._state&&St(this,e)}[x](e){const t=this._abortAlgorithm(e);return _t(this),t}[B](){de(this)}}function bt(e,t,r,n,o,i,s,a){t._controlledWritableStream=e,e._writableStreamController=t,t._queue=void 0,t._queueTotalSize=void 0,de(t),t._started=!1,t._strategySizeAlgorithm=a,t._strategyHWM=s,t._writeAlgorithm=n,t._closeAlgorithm=o,t._abortAlgorithm=i;const u=wt(t);at(e,u),b(p(r()),(()=>{t._started=!0,mt(t)}),(r=>{t._started=!0,rt(e,r)}))}function _t(e){e._writeAlgorithm=void 0,e._closeAlgorithm=void 0,e._abortAlgorithm=void 0,e._strategySizeAlgorithm=void 0}function gt(e){return e._strategyHWM-e._queueTotalSize}function mt(e){const t=e._controlledWritableStream;if(!e._started)return;if(void 0!==t._inFlightWriteRequest)return;if("erroring"===t._state)return void ot(t);if(0===e._queue.length)return;const r=e._queue.peek().value;r===ht?function(e){const t=e._controlledWritableStream;(function(e){e._inFlightCloseRequest=e._closeRequest,e._closeRequest=void 0})(t),ce(e);const r=e._closeAlgorithm();_t(e),b(r,(()=>{!function(e){e._inFlightCloseRequest._resolve(void 0),e._inFlightCloseRequest=void 0,"erroring"===e._state&&(e._storedError=void 0,void 0!==e._pendingAbortRequest&&(e._pendingAbortRequest._resolve(),e._pendingAbortRequest=void 0)),e._state="closed";const t=e._writer;void 0!==t&&Ot(t)}(t)}),(e=>{!function(e,t){e._inFlightCloseRequest._reject(t),e._inFlightCloseRequest=void 0,void 0!==e._pendingAbortRequest&&(e._pendingAbortRequest._reject(t),e._pendingAbortRequest=void 0),rt(e,t)}(t,e)}))}(e):function(e,t){const r=e._controlledWritableStream;!function(e){e._inFlightWriteRequest=e._writeRequests.shift()}(r),b(e._writeAlgorithm(t),(()=>{!function(e){e._inFlightWriteRequest._resolve(void 0),e._inFlightWriteRequest=void 0}(r);const t=r._state;if(ce(e),!it(r)&&"writable"===t){const t=wt(e);at(r,t)}mt(e)}),(t=>{"writable"===r._state&&_t(e),function(e,t){e._inFlightWriteRequest._reject(t),e._inFlightWriteRequest=void 0,rt(e,t)}(r,t)}))}(e,r)}function vt(e,t){"writable"===e._controlledWritableStream._state&&St(e,t)}function wt(e){return gt(e)<=0}function St(e,t){const r=e._controlledWritableStream;_t(e),nt(r,t)}function Tt(e){return new TypeError(`WritableStream.prototype.${e} can only be used on a WritableStream`)}function jt(e){return new TypeError(`WritableStreamDefaultWriter.prototype.${e} can only be used on a WritableStreamDefaultWriter`)}function Rt(e){return new TypeError("Cannot "+e+" a stream using a released writer")}function Pt(e){e._closedPromise=d(((t,r)=>{e._closedPromise_resolve=t,e._closedPromise_reject=r,e._closedPromiseState="pending"}))}function qt(e,t){Pt(e),Et(e,t)}function Et(e,t){void 0!==e._closedPromise_reject&&(v(e._closedPromise),e._closedPromise_reject(t),e._closedPromise_resolve=void 0,e._closedPromise_reject=void 0,e._closedPromiseState="rejected")}function Ot(e){void 0!==e._closedPromise_resolve&&(e._closedPromise_resolve(void 0),e._closedPromise_resolve=void 0,e._closedPromise_reject=void 0,e._closedPromiseState="resolved")}function At(e){e._readyPromise=d(((t,r)=>{e._readyPromise_resolve=t,e._readyPromise_reject=r})),e._readyPromiseState="pending"}function kt(e,t){At(e),xt(e,t)}function Ct(e){At(e),Bt(e)}function xt(e,t){void 0!==e._readyPromise_reject&&(v(e._readyPromise),e._readyPromise_reject(t),e._readyPromise_resolve=void 0,e._readyPromise_reject=void 0,e._readyPromiseState="rejected")}function Bt(e){void 0!==e._readyPromise_resolve&&(e._readyPromise_resolve(void 0),e._readyPromise_resolve=void 0,e._readyPromise_reject=void 0,e._readyPromiseState="fulfilled")}Object.defineProperties(yt.prototype,{error:{enumerable:!0}}),"symbol"==typeof n.toStringTag&&Object.defineProperty(yt.prototype,n.toStringTag,{value:"WritableStreamDefaultController",configurable:!0});const Wt="undefined"!=typeof DOMException?DOMException:void 0,Lt=function(e){if("function"!=typeof e&&"object"!=typeof e)return!1;try{return new e,!0}catch(e){return!1}}(Wt)?Wt:function(){const e=function(e,t){this.message=e||"",this.name=t||"Error",Error.captureStackTrace&&Error.captureStackTrace(this,this.constructor)};return e.prototype=Object.create(Error.prototype),Object.defineProperty(e.prototype,"constructor",{value:e,writable:!0,configurable:!0}),e}();function $t(e,t,r,n,i,s){const a=Y(e),u=Je(t);e._disturbed=!0;let l=!1,c=p(void 0);return d(((f,m)=>{let w;if(void 0!==s){if(w=()=>{const r=new Lt("Aborted","AbortError"),o=[];n||o.push((()=>"writable"===t._state?et(t,r):p(void 0))),i||o.push((()=>"readable"===e._state?ar(e,r):p(void 0))),E((()=>Promise.all(o.map((e=>e())))),!0,r)},s.aborted)return void w();s.addEventListener("abort",w)}var S,T,j;if(P(e,a._closedPromise,(e=>{n?O(!0,e):E((()=>et(t,e)),!0,e)})),P(t,u._closedPromise,(t=>{i?O(!0,t):E((()=>ar(e,t)),!0,t)})),S=e,T=a._closedPromise,j=()=>{r?O():E((()=>function(e){const t=e._ownerWritableStream,r=t._state;return it(t)||"closed"===r?p(void 0):"errored"===r?h(t._storedError):ct(e)}(u)))},"closed"===S._state?j():_(T,j),it(t)||"closed"===t._state){const t=new TypeError("the destination writable stream closed before all data could be piped to it");i?O(!0,t):E((()=>ar(e,t)),!0,t)}function R(){const e=c;return y(c,(()=>e!==c?R():void 0))}function P(e,t,r){"errored"===e._state?r(e._storedError):g(t,r)}function E(e,r,n){function o(){b(e(),(()=>A(r,n)),(e=>A(!0,e)))}l||(l=!0,"writable"!==t._state||it(t)?o():_(R(),o))}function O(e,r){l||(l=!0,"writable"!==t._state||it(t)?A(e,r):_(R(),(()=>A(e,r))))}function A(e,t){dt(u),q(a),void 0!==s&&s.removeEventListener("abort",w),e?m(t):f(void 0)}v(d(((e,t)=>{!function r(n){n?e():y(l?p(!0):y(u._readyPromise,(()=>d(((e,t)=>{te(a,{_chunkSteps:t=>{c=y(pt(u,t),void 0,o),e(!1)},_closeSteps:()=>e(!0),_errorSteps:t})})))),r,t)}(!1)})))}))}class zt{constructor(){throw new TypeError("Illegal constructor")}get desiredSize(){if(!Mt(this))throw Gt("desiredSize");return Vt(this)}close(){if(!Mt(this))throw Gt("close");if(!Qt(this))throw new TypeError("The stream is not in a state that permits close");Ut(this)}enqueue(e){if(!Mt(this))throw Gt("enqueue");if(!Qt(this))throw new TypeError("The stream is not in a state that permits enqueue");return Ht(this,e)}error(e){if(!Mt(this))throw Gt("error");Nt(this,e)}[W](e){de(this);const t=this._cancelAlgorithm(e);return Dt(this),t}[L](e){const t=this._controlledReadableStream;if(this._queue.length>0){const r=ce(this);this._closeRequested&&0===this._queue.length?(Dt(this),ur(t)):It(this),e._chunkSteps(r)}else G(t,e),It(this)}}function Mt(e){return!!s(e)&&!!Object.prototype.hasOwnProperty.call(e,"_controlledReadableStream")}function It(e){Ft(e)&&(e._pulling?e._pullAgain=!0:(e._pulling=!0,b(e._pullAlgorithm(),(()=>{e._pulling=!1,e._pullAgain&&(e._pullAgain=!1,It(e))}),(t=>{Nt(e,t)}))))}function Ft(e){const t=e._controlledReadableStream;return!!Qt(e)&&(!!e._started&&(!!(sr(t)&&K(t)>0)||Vt(e)>0))}function Dt(e){e._pullAlgorithm=void 0,e._cancelAlgorithm=void 0,e._strategySizeAlgorithm=void 0}function Ut(e){if(!Qt(e))return;const t=e._controlledReadableStream;e._closeRequested=!0,0===e._queue.length&&(Dt(e),ur(t))}function Ht(e,t){if(!Qt(e))return;const r=e._controlledReadableStream;if(sr(r)&&K(r)>0)J(r,t,!1);else{let r;try{r=e._strategySizeAlgorithm(t)}catch(t){throw Nt(e,t),t}try{fe(e,t,r)}catch(t){throw Nt(e,t),t}}It(e)}function Nt(e,t){const r=e._controlledReadableStream;"readable"===r._state&&(de(e),Dt(e),lr(r,t))}function Vt(e){const t=e._controlledReadableStream._state;return"errored"===t?null:"closed"===t?0:e._strategyHWM-e._queueTotalSize}function Qt(e){const t=e._controlledReadableStream._state;return!e._closeRequested&&"readable"===t}function Yt(e,t,r,n,o,i,s){t._controlledReadableStream=e,t._queue=void 0,t._queueTotalSize=void 0,de(t),t._started=!1,t._closeRequested=!1,t._pullAgain=!1,t._pulling=!1,t._strategySizeAlgorithm=s,t._strategyHWM=i,t._pullAlgorithm=n,t._cancelAlgorithm=o,e._readableStreamController=t,b(p(r()),(()=>{t._started=!0,It(t)}),(e=>{Nt(t,e)}))}function Gt(e){return new TypeError(`ReadableStreamDefaultController.prototype.${e} can only be used on a ReadableStreamDefaultController`)}function Jt(e,t,r){return I(e,r),r=>T(e,t,[r])}function Kt(e,t,r){return I(e,r),r=>T(e,t,[r])}function Zt(e,t,r){return I(e,r),r=>S(e,t,[r])}function Xt(e,t){if("bytes"!=(e=`${e}`))throw new TypeError(`${t} '${e}' is not a valid enumeration value for ReadableStreamType`);return e}function er(e,t){if("byob"!=(e=`${e}`))throw new TypeError(`${t} '${e}' is not a valid enumeration value for ReadableStreamReaderMode`);return e}function tr(e,t){M(e,t);const r=null==e?void 0:e.preventAbort,n=null==e?void 0:e.preventCancel,o=null==e?void 0:e.preventClose,i=null==e?void 0:e.signal;return void 0!==i&&function(e,t){if(!function(e){if("object"!=typeof e||null===e)return!1;try{return"boolean"==typeof e.aborted}catch(e){return!1}}(e))throw new TypeError(`${t} is not an AbortSignal.`)}(i,`${t} has member 'signal' that`),{preventAbort:Boolean(r),preventCancel:Boolean(n),preventClose:Boolean(o),signal:i}}Object.defineProperties(zt.prototype,{close:{enumerable:!0},enqueue:{enumerable:!0},error:{enumerable:!0},desiredSize:{enumerable:!0}}),"symbol"==typeof n.toStringTag&&Object.defineProperty(zt.prototype,n.toStringTag,{value:"ReadableStreamDefaultController",configurable:!0});class rr{constructor(e={},t={}){void 0===e?e=null:F(e,"First parameter");const r=De(t,"Second parameter"),n=function(e,t){M(e,t);const r=e,n=null==r?void 0:r.autoAllocateChunkSize,o=null==r?void 0:r.cancel,i=null==r?void 0:r.pull,s=null==r?void 0:r.start,a=null==r?void 0:r.type;return{autoAllocateChunkSize:void 0===n?void 0:V(n,`${t} has member 'autoAllocateChunkSize' that`),cancel:void 0===o?void 0:Jt(o,r,`${t} has member 'cancel' that`),pull:void 0===i?void 0:Kt(i,r,`${t} has member 'pull' that`),start:void 0===s?void 0:Zt(s,r,`${t} has member 'start' that`),type:void 0===a?void 0:Xt(a,`${t} has member 'type' that`)}}(e,"First parameter");if(or(this),"bytes"===n.type){if(void 0!==r.size)throw new RangeError("The strategy for a byte stream cannot have a size function");!function(e,t,r){const n=Object.create(ye.prototype);let o=()=>{},i=()=>p(void 0),s=()=>p(void 0);void 0!==t.start&&(o=()=>t.start(n)),void 0!==t.pull&&(i=()=>t.pull(n)),void 0!==t.cancel&&(s=e=>t.cancel(e));const a=t.autoAllocateChunkSize;!function(e,t,r,n,o,i,s){t._controlledReadableByteStream=e,t._pullAgain=!1,t._pulling=!1,t._byobRequest=null,t._queue=t._queueTotalSize=void 0,de(t),t._closeRequested=!1,t._started=!1,t._strategyHWM=i,t._pullAlgorithm=n,t._cancelAlgorithm=o,t._autoAllocateChunkSize=s,t._pendingPullIntos=new j,e._readableStreamController=t,b(p(r()),(()=>{t._started=!0,ge(t)}),(e=>{Ae(t,e)}))}(e,n,o,i,s,r,a)}(this,n,Ie(r,0))}else{const e=Fe(r);!function(e,t,r,n){const o=Object.create(zt.prototype);let i=()=>{},s=()=>p(void 0),a=()=>p(void 0);void 0!==t.start&&(i=()=>t.start(o)),void 0!==t.pull&&(s=()=>t.pull(o)),void 0!==t.cancel&&(a=e=>t.cancel(e)),Yt(e,o,i,s,a,r,n)}(this,n,Ie(r,1),e)}}get locked(){if(!ir(this))throw cr("locked");return sr(this)}cancel(e){return ir(this)?sr(this)?h(new TypeError("Cannot cancel a stream that already has a reader")):ar(this,e):h(cr("cancel"))}getReader(e){if(!ir(this))throw cr("getReader");return void 0===function(e,t){M(e,t);const r=null==e?void 0:e.mode;return{mode:void 0===r?void 0:er(r,`${t} has member 'mode' that`)}}(e,"First parameter").mode?Y(this):new $e(this)}pipeThrough(e,t={}){if(!ir(this))throw cr("pipeThrough");D(e,1,"pipeThrough");const r=function(e,t){M(e,t);const r=null==e?void 0:e.readable;U(r,"readable","ReadableWritablePair"),Q(r,`${t} has member 'readable' that`);const n=null==e?void 0:e.writable;return U(n,"writable","ReadableWritablePair"),Ye(n,`${t} has member 'writable' that`),{readable:r,writable:n}}(e,"First parameter"),n=tr(t,"Second parameter");if(sr(this))throw new TypeError("ReadableStream.prototype.pipeThrough cannot be used on a locked ReadableStream");if(Xe(r.writable))throw new TypeError("ReadableStream.prototype.pipeThrough cannot be used on a locked WritableStream");return v($t(this,r.writable,n.preventClose,n.preventAbort,n.preventCancel,n.signal)),r.readable}pipeTo(e,t={}){if(!ir(this))return h(cr("pipeTo"));if(void 0===e)return h("Parameter 1 is required in 'pipeTo'.");if(!Ze(e))return h(new TypeError("ReadableStream.prototype.pipeTo's first argument must be a WritableStream"));let r;try{r=tr(t,"Second parameter")}catch(e){return h(e)}return sr(this)?h(new TypeError("ReadableStream.prototype.pipeTo cannot be used on a locked ReadableStream")):Xe(e)?h(new TypeError("ReadableStream.prototype.pipeTo cannot be used on a locked WritableStream")):$t(this,e,r.preventClose,r.preventAbort,r.preventCancel,r.signal)}tee(){if(!ir(this))throw cr("tee");const e=function(e,t){const r=Y(e);let n,o,i,s,a,u=!1,l=!1,c=!1;const f=d((e=>{a=e}));function h(){return u||(u=!0,te(r,{_chunkSteps:e=>{w((()=>{u=!1;const t=e,r=e;l||Ht(i._readableStreamController,t),c||Ht(s._readableStreamController,r),a(void 0)}))},_closeSteps:()=>{u=!1,l||Ut(i._readableStreamController),c||Ut(s._readableStreamController)},_errorSteps:()=>{u=!1}})),p(void 0)}function y(){}return i=nr(y,h,(function(t){if(l=!0,n=t,c){const t=pe([n,o]),r=ar(e,t);a(r)}return f})),s=nr(y,h,(function(t){if(c=!0,o=t,l){const t=pe([n,o]),r=ar(e,t);a(r)}return f})),g(r._closedPromise,(e=>{Nt(i._readableStreamController,e),Nt(s._readableStreamController,e),a(void 0)})),[i,s]}(this);return pe(e)}values(e){if(!ir(this))throw cr("values");return function(e,t){const r=Y(e),n=new oe(r,t),o=Object.create(ie);return o._asyncIteratorImpl=n,o}(this,function(e,t){M(e,"First parameter");const r=null==e?void 0:e.preventCancel;return{preventCancel:Boolean(r)}}(e).preventCancel)}}function nr(e,t,r,n=1,o=(()=>1)){const i=Object.create(rr.prototype);return or(i),Yt(i,Object.create(zt.prototype),e,t,r,n,o),i}function or(e){e._state="readable",e._reader=void 0,e._storedError=void 0,e._disturbed=!1}function ir(e){return!!s(e)&&!!Object.prototype.hasOwnProperty.call(e,"_readableStreamController")}function sr(e){return void 0!==e._reader}function ar(e,t){return e._disturbed=!0,"closed"===e._state?p(void 0):"errored"===e._state?h(e._storedError):(ur(e),m(e._readableStreamController[W](t),o))}function ur(e){e._state="closed";const t=e._reader;void 0!==t&&(ee(t)&&(t._readRequests.forEach((e=>{e._closeSteps()})),t._readRequests=new j),C(t))}function lr(e,t){e._state="errored",e._storedError=t;const r=e._reader;void 0!==r&&(ee(r)?(r._readRequests.forEach((e=>{e._errorSteps(t)})),r._readRequests=new j):(r._readIntoRequests.forEach((e=>{e._errorSteps(t)})),r._readIntoRequests=new j),k(r,t))}function cr(e){return new TypeError(`ReadableStream.prototype.${e} can only be used on a ReadableStream`)}function fr(e,t){M(e,t);const r=null==e?void 0:e.highWaterMark;return U(r,"highWaterMark","QueuingStrategyInit"),{highWaterMark:H(r)}}Object.defineProperties(rr.prototype,{cancel:{enumerable:!0},getReader:{enumerable:!0},pipeThrough:{enumerable:!0},pipeTo:{enumerable:!0},tee:{enumerable:!0},values:{enumerable:!0},locked:{enumerable:!0}}),"symbol"==typeof n.toStringTag&&Object.defineProperty(rr.prototype,n.toStringTag,{value:"ReadableStream",configurable:!0}),"symbol"==typeof n.asyncIterator&&Object.defineProperty(rr.prototype,n.asyncIterator,{value:rr.prototype.values,writable:!0,configurable:!0});const dr=function(e){return e.byteLength};class pr{constructor(e){D(e,1,"ByteLengthQueuingStrategy"),e=fr(e,"First parameter"),this._byteLengthQueuingStrategyHighWaterMark=e.highWaterMark}get highWaterMark(){if(!yr(this))throw hr("highWaterMark");return this._byteLengthQueuingStrategyHighWaterMark}get size(){if(!yr(this))throw hr("size");return dr}}function hr(e){return new TypeError(`ByteLengthQueuingStrategy.prototype.${e} can only be used on a ByteLengthQueuingStrategy`)}function yr(e){return!!s(e)&&!!Object.prototype.hasOwnProperty.call(e,"_byteLengthQueuingStrategyHighWaterMark")}Object.defineProperties(pr.prototype,{highWaterMark:{enumerable:!0},size:{enumerable:!0}}),"symbol"==typeof n.toStringTag&&Object.defineProperty(pr.prototype,n.toStringTag,{value:"ByteLengthQueuingStrategy",configurable:!0});const br=function(){return 1};class _r{constructor(e){D(e,1,"CountQueuingStrategy"),e=fr(e,"First parameter"),this._countQueuingStrategyHighWaterMark=e.highWaterMark}get highWaterMark(){if(!mr(this))throw gr("highWaterMark");return this._countQueuingStrategyHighWaterMark}get size(){if(!mr(this))throw gr("size");return br}}function gr(e){return new TypeError(`CountQueuingStrategy.prototype.${e} can only be used on a CountQueuingStrategy`)}function mr(e){return!!s(e)&&!!Object.prototype.hasOwnProperty.call(e,"_countQueuingStrategyHighWaterMark")}function vr(e,t,r){return I(e,r),r=>T(e,t,[r])}function wr(e,t,r){return I(e,r),r=>S(e,t,[r])}function Sr(e,t,r){return I(e,r),(r,n)=>T(e,t,[r,n])}Object.defineProperties(_r.prototype,{highWaterMark:{enumerable:!0},size:{enumerable:!0}}),"symbol"==typeof n.toStringTag&&Object.defineProperty(_r.prototype,n.toStringTag,{value:"CountQueuingStrategy",configurable:!0});class Tr{constructor(e={},t={},r={}){void 0===e&&(e=null);const n=De(t,"Second parameter"),o=De(r,"Third parameter"),i=function(e,t){M(e,t);const r=null==e?void 0:e.flush,n=null==e?void 0:e.readableType,o=null==e?void 0:e.start,i=null==e?void 0:e.transform,s=null==e?void 0:e.writableType;return{flush:void 0===r?void 0:vr(r,e,`${t} has member 'flush' that`),readableType:n,start:void 0===o?void 0:wr(o,e,`${t} has member 'start' that`),transform:void 0===i?void 0:Sr(i,e,`${t} has member 'transform' that`),writableType:s}}(e,"First parameter");if(void 0!==i.readableType)throw new RangeError("Invalid readableType specified");if(void 0!==i.writableType)throw new RangeError("Invalid writableType specified");const s=Ie(o,0),a=Fe(o),u=Ie(n,1),l=Fe(n);let c;!function(e,t,r,n,o,i){function s(){return t}e._writable=function(e,t,r,n,o=1,i=(()=>1)){const s=Object.create(Ge.prototype);return Ke(s),bt(s,Object.create(yt.prototype),e,t,r,n,o,i),s}(s,(function(t){return function(e,t){const r=e._transformStreamController;return e._backpressure?m(e._backpressureChangePromise,(()=>{const n=e._writable;if("erroring"===n._state)throw n._storedError;return Cr(r,t)})):Cr(r,t)}(e,t)}),(function(){return function(e){const t=e._readable,r=e._transformStreamController,n=r._flushAlgorithm();return Ar(r),m(n,(()=>{if("errored"===t._state)throw t._storedError;Ut(t._readableStreamController)}),(r=>{throw Rr(e,r),t._storedError}))}(e)}),(function(t){return function(e,t){return Rr(e,t),p(void 0)}(e,t)}),r,n),e._readable=nr(s,(function(){return function(e){return qr(e,!1),e._backpressureChangePromise}(e)}),(function(t){return Pr(e,t),p(void 0)}),o,i),e._backpressure=void 0,e._backpressureChangePromise=void 0,e._backpressureChangePromise_resolve=void 0,qr(e,!0),e._transformStreamController=void 0}(this,d((e=>{c=e})),u,l,s,a),function(e,t){const r=Object.create(Er.prototype);let n=e=>{try{return kr(r,e),p(void 0)}catch(e){return h(e)}},o=()=>p(void 0);void 0!==t.transform&&(n=e=>t.transform(e,r)),void 0!==t.flush&&(o=()=>t.flush(r)),function(e,t,r,n){t._controlledTransformStream=e,e._transformStreamController=t,t._transformAlgorithm=r,t._flushAlgorithm=n}(e,r,n,o)}(this,i),void 0!==i.start?c(i.start(this._transformStreamController)):c(void 0)}get readable(){if(!jr(this))throw Br("readable");return this._readable}get writable(){if(!jr(this))throw Br("writable");return this._writable}}function jr(e){return!!s(e)&&!!Object.prototype.hasOwnProperty.call(e,"_transformStreamController")}function Rr(e,t){Nt(e._readable._readableStreamController,t),Pr(e,t)}function Pr(e,t){Ar(e._transformStreamController),vt(e._writable._writableStreamController,t),e._backpressure&&qr(e,!1)}function qr(e,t){void 0!==e._backpressureChangePromise&&e._backpressureChangePromise_resolve(),e._backpressureChangePromise=d((t=>{e._backpressureChangePromise_resolve=t})),e._backpressure=t}Object.defineProperties(Tr.prototype,{readable:{enumerable:!0},writable:{enumerable:!0}}),"symbol"==typeof n.toStringTag&&Object.defineProperty(Tr.prototype,n.toStringTag,{value:"TransformStream",configurable:!0});class Er{constructor(){throw new TypeError("Illegal constructor")}get desiredSize(){if(!Or(this))throw xr("desiredSize");return Vt(this._controlledTransformStream._readable._readableStreamController)}enqueue(e){if(!Or(this))throw xr("enqueue");kr(this,e)}error(e){if(!Or(this))throw xr("error");var t;t=e,Rr(this._controlledTransformStream,t)}terminate(){if(!Or(this))throw xr("terminate");!function(e){const t=e._controlledTransformStream;Ut(t._readable._readableStreamController);Pr(t,new TypeError("TransformStream terminated"))}(this)}}function Or(e){return!!s(e)&&!!Object.prototype.hasOwnProperty.call(e,"_controlledTransformStream")}function Ar(e){e._transformAlgorithm=void 0,e._flushAlgorithm=void 0}function kr(e,t){const r=e._controlledTransformStream,n=r._readable._readableStreamController;if(!Qt(n))throw new TypeError("Readable side is not in a state that permits enqueue");try{Ht(n,t)}catch(e){throw Pr(r,e),r._readable._storedError}(function(e){return!Ft(e)})(n)!==r._backpressure&&qr(r,!0)}function Cr(e,t){return m(e._transformAlgorithm(t),void 0,(t=>{throw Rr(e._controlledTransformStream,t),t}))}function xr(e){return new TypeError(`TransformStreamDefaultController.prototype.${e} can only be used on a TransformStreamDefaultController`)}function Br(e){return new TypeError(`TransformStream.prototype.${e} can only be used on a TransformStream`)}Object.defineProperties(Er.prototype,{enqueue:{enumerable:!0},error:{enumerable:!0},terminate:{enumerable:!0},desiredSize:{enumerable:!0}}),"symbol"==typeof n.toStringTag&&Object.defineProperty(Er.prototype,n.toStringTag,{value:"TransformStreamDefaultController",configurable:!0})},417:e=>{"use strict";e.exports=require("crypto")},605:e=>{"use strict";e.exports=require("http")},211:e=>{"use strict";e.exports=require("https")},413:e=>{"use strict";e.exports=require("stream")},835:e=>{"use strict";e.exports=require("url")},669:e=>{"use strict";e.exports=require("util")},761:e=>{"use strict";e.exports=require("zlib")}},t={};function r(n){if(t[n])return t[n].exports;var o=t[n]={id:n,loaded:!1,exports:{}};return e[n].call(o.exports,o,o.exports,r),o.loaded=!0,o.exports}return r.d=(e,t)=>{for(var n in t)r.o(t,n)&&!r.o(e,n)&&Object.defineProperty(e,n,{enumerable:!0,get:t[n]})},r.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),r.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},r.nmd=e=>(e.paths=[],e.children||(e.children=[]),e),r(990)})().default}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,